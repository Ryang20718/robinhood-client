/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the AccountInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountInfo{}

// AccountInfo struct for AccountInfo
type AccountInfo struct {
	AccountNumber *string `json:"account_number,omitempty"`
	BuyingPower *string `json:"buying_power,omitempty"`
	Cash *string `json:"cash,omitempty"`
	CashAvailableForWithdrawal *string `json:"cash_available_for_withdrawal,omitempty"`
	CashBalances *CashBalances `json:"cash_balances,omitempty"`
	CashHeldForOrders *string `json:"cash_held_for_orders,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Deactivated *bool `json:"deactivated,omitempty"`
	DepositHalted *bool `json:"deposit_halted,omitempty"`
	MarginBalances *MarginBalances `json:"margin_balances,omitempty"`
	MaxAchEarlyAccessAmount *string `json:"max_ach_early_access_amount,omitempty"`
	OnlyPositionClosingTrades *bool `json:"only_position_closing_trades,omitempty"`
	Portfolio *string `json:"portfolio,omitempty"`
	Positions *string `json:"positions,omitempty"`
	Sma *string `json:"sma,omitempty"`
	SmaHeldForOrders *string `json:"sma_held_for_orders,omitempty"`
	SweepEnabled *bool `json:"sweep_enabled,omitempty"`
	Type *AccountType `json:"type,omitempty"`
	UnclearedDeposits *string `json:"uncleared_deposits,omitempty"`
	UnsettledFunds *string `json:"unsettled_funds,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Url *string `json:"url,omitempty"`
	User *string `json:"user,omitempty"`
	WithdrawalHalted *bool `json:"withdrawal_halted,omitempty"`
}

// NewAccountInfo instantiates a new AccountInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountInfo() *AccountInfo {
	this := AccountInfo{}
	return &this
}

// NewAccountInfoWithDefaults instantiates a new AccountInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountInfoWithDefaults() *AccountInfo {
	this := AccountInfo{}
	return &this
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *AccountInfo) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber) {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetAccountNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AccountNumber) {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *AccountInfo) HasAccountNumber() bool {
	if o != nil && !IsNil(o.AccountNumber) {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *AccountInfo) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetBuyingPower returns the BuyingPower field value if set, zero value otherwise.
func (o *AccountInfo) GetBuyingPower() string {
	if o == nil || IsNil(o.BuyingPower) {
		var ret string
		return ret
	}
	return *o.BuyingPower
}

// GetBuyingPowerOk returns a tuple with the BuyingPower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetBuyingPowerOk() (*string, bool) {
	if o == nil || IsNil(o.BuyingPower) {
		return nil, false
	}
	return o.BuyingPower, true
}

// HasBuyingPower returns a boolean if a field has been set.
func (o *AccountInfo) HasBuyingPower() bool {
	if o != nil && !IsNil(o.BuyingPower) {
		return true
	}

	return false
}

// SetBuyingPower gets a reference to the given string and assigns it to the BuyingPower field.
func (o *AccountInfo) SetBuyingPower(v string) {
	o.BuyingPower = &v
}

// GetCash returns the Cash field value if set, zero value otherwise.
func (o *AccountInfo) GetCash() string {
	if o == nil || IsNil(o.Cash) {
		var ret string
		return ret
	}
	return *o.Cash
}

// GetCashOk returns a tuple with the Cash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetCashOk() (*string, bool) {
	if o == nil || IsNil(o.Cash) {
		return nil, false
	}
	return o.Cash, true
}

// HasCash returns a boolean if a field has been set.
func (o *AccountInfo) HasCash() bool {
	if o != nil && !IsNil(o.Cash) {
		return true
	}

	return false
}

// SetCash gets a reference to the given string and assigns it to the Cash field.
func (o *AccountInfo) SetCash(v string) {
	o.Cash = &v
}

// GetCashAvailableForWithdrawal returns the CashAvailableForWithdrawal field value if set, zero value otherwise.
func (o *AccountInfo) GetCashAvailableForWithdrawal() string {
	if o == nil || IsNil(o.CashAvailableForWithdrawal) {
		var ret string
		return ret
	}
	return *o.CashAvailableForWithdrawal
}

// GetCashAvailableForWithdrawalOk returns a tuple with the CashAvailableForWithdrawal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetCashAvailableForWithdrawalOk() (*string, bool) {
	if o == nil || IsNil(o.CashAvailableForWithdrawal) {
		return nil, false
	}
	return o.CashAvailableForWithdrawal, true
}

// HasCashAvailableForWithdrawal returns a boolean if a field has been set.
func (o *AccountInfo) HasCashAvailableForWithdrawal() bool {
	if o != nil && !IsNil(o.CashAvailableForWithdrawal) {
		return true
	}

	return false
}

// SetCashAvailableForWithdrawal gets a reference to the given string and assigns it to the CashAvailableForWithdrawal field.
func (o *AccountInfo) SetCashAvailableForWithdrawal(v string) {
	o.CashAvailableForWithdrawal = &v
}

// GetCashBalances returns the CashBalances field value if set, zero value otherwise.
func (o *AccountInfo) GetCashBalances() CashBalances {
	if o == nil || IsNil(o.CashBalances) {
		var ret CashBalances
		return ret
	}
	return *o.CashBalances
}

// GetCashBalancesOk returns a tuple with the CashBalances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetCashBalancesOk() (*CashBalances, bool) {
	if o == nil || IsNil(o.CashBalances) {
		return nil, false
	}
	return o.CashBalances, true
}

// HasCashBalances returns a boolean if a field has been set.
func (o *AccountInfo) HasCashBalances() bool {
	if o != nil && !IsNil(o.CashBalances) {
		return true
	}

	return false
}

// SetCashBalances gets a reference to the given CashBalances and assigns it to the CashBalances field.
func (o *AccountInfo) SetCashBalances(v CashBalances) {
	o.CashBalances = &v
}

// GetCashHeldForOrders returns the CashHeldForOrders field value if set, zero value otherwise.
func (o *AccountInfo) GetCashHeldForOrders() string {
	if o == nil || IsNil(o.CashHeldForOrders) {
		var ret string
		return ret
	}
	return *o.CashHeldForOrders
}

// GetCashHeldForOrdersOk returns a tuple with the CashHeldForOrders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetCashHeldForOrdersOk() (*string, bool) {
	if o == nil || IsNil(o.CashHeldForOrders) {
		return nil, false
	}
	return o.CashHeldForOrders, true
}

// HasCashHeldForOrders returns a boolean if a field has been set.
func (o *AccountInfo) HasCashHeldForOrders() bool {
	if o != nil && !IsNil(o.CashHeldForOrders) {
		return true
	}

	return false
}

// SetCashHeldForOrders gets a reference to the given string and assigns it to the CashHeldForOrders field.
func (o *AccountInfo) SetCashHeldForOrders(v string) {
	o.CashHeldForOrders = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AccountInfo) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AccountInfo) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AccountInfo) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeactivated returns the Deactivated field value if set, zero value otherwise.
func (o *AccountInfo) GetDeactivated() bool {
	if o == nil || IsNil(o.Deactivated) {
		var ret bool
		return ret
	}
	return *o.Deactivated
}

// GetDeactivatedOk returns a tuple with the Deactivated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetDeactivatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deactivated) {
		return nil, false
	}
	return o.Deactivated, true
}

// HasDeactivated returns a boolean if a field has been set.
func (o *AccountInfo) HasDeactivated() bool {
	if o != nil && !IsNil(o.Deactivated) {
		return true
	}

	return false
}

// SetDeactivated gets a reference to the given bool and assigns it to the Deactivated field.
func (o *AccountInfo) SetDeactivated(v bool) {
	o.Deactivated = &v
}

// GetDepositHalted returns the DepositHalted field value if set, zero value otherwise.
func (o *AccountInfo) GetDepositHalted() bool {
	if o == nil || IsNil(o.DepositHalted) {
		var ret bool
		return ret
	}
	return *o.DepositHalted
}

// GetDepositHaltedOk returns a tuple with the DepositHalted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetDepositHaltedOk() (*bool, bool) {
	if o == nil || IsNil(o.DepositHalted) {
		return nil, false
	}
	return o.DepositHalted, true
}

// HasDepositHalted returns a boolean if a field has been set.
func (o *AccountInfo) HasDepositHalted() bool {
	if o != nil && !IsNil(o.DepositHalted) {
		return true
	}

	return false
}

// SetDepositHalted gets a reference to the given bool and assigns it to the DepositHalted field.
func (o *AccountInfo) SetDepositHalted(v bool) {
	o.DepositHalted = &v
}

// GetMarginBalances returns the MarginBalances field value if set, zero value otherwise.
func (o *AccountInfo) GetMarginBalances() MarginBalances {
	if o == nil || IsNil(o.MarginBalances) {
		var ret MarginBalances
		return ret
	}
	return *o.MarginBalances
}

// GetMarginBalancesOk returns a tuple with the MarginBalances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetMarginBalancesOk() (*MarginBalances, bool) {
	if o == nil || IsNil(o.MarginBalances) {
		return nil, false
	}
	return o.MarginBalances, true
}

// HasMarginBalances returns a boolean if a field has been set.
func (o *AccountInfo) HasMarginBalances() bool {
	if o != nil && !IsNil(o.MarginBalances) {
		return true
	}

	return false
}

// SetMarginBalances gets a reference to the given MarginBalances and assigns it to the MarginBalances field.
func (o *AccountInfo) SetMarginBalances(v MarginBalances) {
	o.MarginBalances = &v
}

// GetMaxAchEarlyAccessAmount returns the MaxAchEarlyAccessAmount field value if set, zero value otherwise.
func (o *AccountInfo) GetMaxAchEarlyAccessAmount() string {
	if o == nil || IsNil(o.MaxAchEarlyAccessAmount) {
		var ret string
		return ret
	}
	return *o.MaxAchEarlyAccessAmount
}

// GetMaxAchEarlyAccessAmountOk returns a tuple with the MaxAchEarlyAccessAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetMaxAchEarlyAccessAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MaxAchEarlyAccessAmount) {
		return nil, false
	}
	return o.MaxAchEarlyAccessAmount, true
}

// HasMaxAchEarlyAccessAmount returns a boolean if a field has been set.
func (o *AccountInfo) HasMaxAchEarlyAccessAmount() bool {
	if o != nil && !IsNil(o.MaxAchEarlyAccessAmount) {
		return true
	}

	return false
}

// SetMaxAchEarlyAccessAmount gets a reference to the given string and assigns it to the MaxAchEarlyAccessAmount field.
func (o *AccountInfo) SetMaxAchEarlyAccessAmount(v string) {
	o.MaxAchEarlyAccessAmount = &v
}

// GetOnlyPositionClosingTrades returns the OnlyPositionClosingTrades field value if set, zero value otherwise.
func (o *AccountInfo) GetOnlyPositionClosingTrades() bool {
	if o == nil || IsNil(o.OnlyPositionClosingTrades) {
		var ret bool
		return ret
	}
	return *o.OnlyPositionClosingTrades
}

// GetOnlyPositionClosingTradesOk returns a tuple with the OnlyPositionClosingTrades field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetOnlyPositionClosingTradesOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyPositionClosingTrades) {
		return nil, false
	}
	return o.OnlyPositionClosingTrades, true
}

// HasOnlyPositionClosingTrades returns a boolean if a field has been set.
func (o *AccountInfo) HasOnlyPositionClosingTrades() bool {
	if o != nil && !IsNil(o.OnlyPositionClosingTrades) {
		return true
	}

	return false
}

// SetOnlyPositionClosingTrades gets a reference to the given bool and assigns it to the OnlyPositionClosingTrades field.
func (o *AccountInfo) SetOnlyPositionClosingTrades(v bool) {
	o.OnlyPositionClosingTrades = &v
}

// GetPortfolio returns the Portfolio field value if set, zero value otherwise.
func (o *AccountInfo) GetPortfolio() string {
	if o == nil || IsNil(o.Portfolio) {
		var ret string
		return ret
	}
	return *o.Portfolio
}

// GetPortfolioOk returns a tuple with the Portfolio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetPortfolioOk() (*string, bool) {
	if o == nil || IsNil(o.Portfolio) {
		return nil, false
	}
	return o.Portfolio, true
}

// HasPortfolio returns a boolean if a field has been set.
func (o *AccountInfo) HasPortfolio() bool {
	if o != nil && !IsNil(o.Portfolio) {
		return true
	}

	return false
}

// SetPortfolio gets a reference to the given string and assigns it to the Portfolio field.
func (o *AccountInfo) SetPortfolio(v string) {
	o.Portfolio = &v
}

// GetPositions returns the Positions field value if set, zero value otherwise.
func (o *AccountInfo) GetPositions() string {
	if o == nil || IsNil(o.Positions) {
		var ret string
		return ret
	}
	return *o.Positions
}

// GetPositionsOk returns a tuple with the Positions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetPositionsOk() (*string, bool) {
	if o == nil || IsNil(o.Positions) {
		return nil, false
	}
	return o.Positions, true
}

// HasPositions returns a boolean if a field has been set.
func (o *AccountInfo) HasPositions() bool {
	if o != nil && !IsNil(o.Positions) {
		return true
	}

	return false
}

// SetPositions gets a reference to the given string and assigns it to the Positions field.
func (o *AccountInfo) SetPositions(v string) {
	o.Positions = &v
}

// GetSma returns the Sma field value if set, zero value otherwise.
func (o *AccountInfo) GetSma() string {
	if o == nil || IsNil(o.Sma) {
		var ret string
		return ret
	}
	return *o.Sma
}

// GetSmaOk returns a tuple with the Sma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetSmaOk() (*string, bool) {
	if o == nil || IsNil(o.Sma) {
		return nil, false
	}
	return o.Sma, true
}

// HasSma returns a boolean if a field has been set.
func (o *AccountInfo) HasSma() bool {
	if o != nil && !IsNil(o.Sma) {
		return true
	}

	return false
}

// SetSma gets a reference to the given string and assigns it to the Sma field.
func (o *AccountInfo) SetSma(v string) {
	o.Sma = &v
}

// GetSmaHeldForOrders returns the SmaHeldForOrders field value if set, zero value otherwise.
func (o *AccountInfo) GetSmaHeldForOrders() string {
	if o == nil || IsNil(o.SmaHeldForOrders) {
		var ret string
		return ret
	}
	return *o.SmaHeldForOrders
}

// GetSmaHeldForOrdersOk returns a tuple with the SmaHeldForOrders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetSmaHeldForOrdersOk() (*string, bool) {
	if o == nil || IsNil(o.SmaHeldForOrders) {
		return nil, false
	}
	return o.SmaHeldForOrders, true
}

// HasSmaHeldForOrders returns a boolean if a field has been set.
func (o *AccountInfo) HasSmaHeldForOrders() bool {
	if o != nil && !IsNil(o.SmaHeldForOrders) {
		return true
	}

	return false
}

// SetSmaHeldForOrders gets a reference to the given string and assigns it to the SmaHeldForOrders field.
func (o *AccountInfo) SetSmaHeldForOrders(v string) {
	o.SmaHeldForOrders = &v
}

// GetSweepEnabled returns the SweepEnabled field value if set, zero value otherwise.
func (o *AccountInfo) GetSweepEnabled() bool {
	if o == nil || IsNil(o.SweepEnabled) {
		var ret bool
		return ret
	}
	return *o.SweepEnabled
}

// GetSweepEnabledOk returns a tuple with the SweepEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetSweepEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.SweepEnabled) {
		return nil, false
	}
	return o.SweepEnabled, true
}

// HasSweepEnabled returns a boolean if a field has been set.
func (o *AccountInfo) HasSweepEnabled() bool {
	if o != nil && !IsNil(o.SweepEnabled) {
		return true
	}

	return false
}

// SetSweepEnabled gets a reference to the given bool and assigns it to the SweepEnabled field.
func (o *AccountInfo) SetSweepEnabled(v bool) {
	o.SweepEnabled = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AccountInfo) GetType() AccountType {
	if o == nil || IsNil(o.Type) {
		var ret AccountType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetTypeOk() (*AccountType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AccountInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AccountType and assigns it to the Type field.
func (o *AccountInfo) SetType(v AccountType) {
	o.Type = &v
}

// GetUnclearedDeposits returns the UnclearedDeposits field value if set, zero value otherwise.
func (o *AccountInfo) GetUnclearedDeposits() string {
	if o == nil || IsNil(o.UnclearedDeposits) {
		var ret string
		return ret
	}
	return *o.UnclearedDeposits
}

// GetUnclearedDepositsOk returns a tuple with the UnclearedDeposits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetUnclearedDepositsOk() (*string, bool) {
	if o == nil || IsNil(o.UnclearedDeposits) {
		return nil, false
	}
	return o.UnclearedDeposits, true
}

// HasUnclearedDeposits returns a boolean if a field has been set.
func (o *AccountInfo) HasUnclearedDeposits() bool {
	if o != nil && !IsNil(o.UnclearedDeposits) {
		return true
	}

	return false
}

// SetUnclearedDeposits gets a reference to the given string and assigns it to the UnclearedDeposits field.
func (o *AccountInfo) SetUnclearedDeposits(v string) {
	o.UnclearedDeposits = &v
}

// GetUnsettledFunds returns the UnsettledFunds field value if set, zero value otherwise.
func (o *AccountInfo) GetUnsettledFunds() string {
	if o == nil || IsNil(o.UnsettledFunds) {
		var ret string
		return ret
	}
	return *o.UnsettledFunds
}

// GetUnsettledFundsOk returns a tuple with the UnsettledFunds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetUnsettledFundsOk() (*string, bool) {
	if o == nil || IsNil(o.UnsettledFunds) {
		return nil, false
	}
	return o.UnsettledFunds, true
}

// HasUnsettledFunds returns a boolean if a field has been set.
func (o *AccountInfo) HasUnsettledFunds() bool {
	if o != nil && !IsNil(o.UnsettledFunds) {
		return true
	}

	return false
}

// SetUnsettledFunds gets a reference to the given string and assigns it to the UnsettledFunds field.
func (o *AccountInfo) SetUnsettledFunds(v string) {
	o.UnsettledFunds = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *AccountInfo) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *AccountInfo) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *AccountInfo) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AccountInfo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AccountInfo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AccountInfo) SetUrl(v string) {
	o.Url = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AccountInfo) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AccountInfo) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *AccountInfo) SetUser(v string) {
	o.User = &v
}

// GetWithdrawalHalted returns the WithdrawalHalted field value if set, zero value otherwise.
func (o *AccountInfo) GetWithdrawalHalted() bool {
	if o == nil || IsNil(o.WithdrawalHalted) {
		var ret bool
		return ret
	}
	return *o.WithdrawalHalted
}

// GetWithdrawalHaltedOk returns a tuple with the WithdrawalHalted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountInfo) GetWithdrawalHaltedOk() (*bool, bool) {
	if o == nil || IsNil(o.WithdrawalHalted) {
		return nil, false
	}
	return o.WithdrawalHalted, true
}

// HasWithdrawalHalted returns a boolean if a field has been set.
func (o *AccountInfo) HasWithdrawalHalted() bool {
	if o != nil && !IsNil(o.WithdrawalHalted) {
		return true
	}

	return false
}

// SetWithdrawalHalted gets a reference to the given bool and assigns it to the WithdrawalHalted field.
func (o *AccountInfo) SetWithdrawalHalted(v bool) {
	o.WithdrawalHalted = &v
}

func (o AccountInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountNumber) {
		toSerialize["account_number"] = o.AccountNumber
	}
	if !IsNil(o.BuyingPower) {
		toSerialize["buying_power"] = o.BuyingPower
	}
	if !IsNil(o.Cash) {
		toSerialize["cash"] = o.Cash
	}
	if !IsNil(o.CashAvailableForWithdrawal) {
		toSerialize["cash_available_for_withdrawal"] = o.CashAvailableForWithdrawal
	}
	if !IsNil(o.CashBalances) {
		toSerialize["cash_balances"] = o.CashBalances
	}
	if !IsNil(o.CashHeldForOrders) {
		toSerialize["cash_held_for_orders"] = o.CashHeldForOrders
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Deactivated) {
		toSerialize["deactivated"] = o.Deactivated
	}
	if !IsNil(o.DepositHalted) {
		toSerialize["deposit_halted"] = o.DepositHalted
	}
	if !IsNil(o.MarginBalances) {
		toSerialize["margin_balances"] = o.MarginBalances
	}
	if !IsNil(o.MaxAchEarlyAccessAmount) {
		toSerialize["max_ach_early_access_amount"] = o.MaxAchEarlyAccessAmount
	}
	if !IsNil(o.OnlyPositionClosingTrades) {
		toSerialize["only_position_closing_trades"] = o.OnlyPositionClosingTrades
	}
	if !IsNil(o.Portfolio) {
		toSerialize["portfolio"] = o.Portfolio
	}
	if !IsNil(o.Positions) {
		toSerialize["positions"] = o.Positions
	}
	if !IsNil(o.Sma) {
		toSerialize["sma"] = o.Sma
	}
	if !IsNil(o.SmaHeldForOrders) {
		toSerialize["sma_held_for_orders"] = o.SmaHeldForOrders
	}
	if !IsNil(o.SweepEnabled) {
		toSerialize["sweep_enabled"] = o.SweepEnabled
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UnclearedDeposits) {
		toSerialize["uncleared_deposits"] = o.UnclearedDeposits
	}
	if !IsNil(o.UnsettledFunds) {
		toSerialize["unsettled_funds"] = o.UnsettledFunds
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.WithdrawalHalted) {
		toSerialize["withdrawal_halted"] = o.WithdrawalHalted
	}
	return toSerialize, nil
}

type NullableAccountInfo struct {
	value *AccountInfo
	isSet bool
}

func (v NullableAccountInfo) Get() *AccountInfo {
	return v.value
}

func (v *NullableAccountInfo) Set(val *AccountInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountInfo(val *AccountInfo) *NullableAccountInfo {
	return &NullableAccountInfo{value: val, isSet: true}
}

func (v NullableAccountInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


