/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// InstrumentState the model 'InstrumentState'
type InstrumentState string

// List of InstrumentState
const (
	ACTIVE InstrumentState = "active"
	INACTIVE InstrumentState = "inactive"
)

// All allowed values of InstrumentState enum
var AllowedInstrumentStateEnumValues = []InstrumentState{
	"active",
	"inactive",
}

func (v *InstrumentState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstrumentState(value)
	for _, existing := range AllowedInstrumentStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstrumentState", value)
}

// NewInstrumentStateFromValue returns a pointer to a valid InstrumentState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstrumentStateFromValue(v string) (*InstrumentState, error) {
	ev := InstrumentState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstrumentState: valid values are %v", v, AllowedInstrumentStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstrumentState) IsValid() bool {
	for _, existing := range AllowedInstrumentStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstrumentState value
func (v InstrumentState) Ptr() *InstrumentState {
	return &v
}

type NullableInstrumentState struct {
	value *InstrumentState
	isSet bool
}

func (v NullableInstrumentState) Get() *InstrumentState {
	return v.value
}

func (v *NullableInstrumentState) Set(val *InstrumentState) {
	v.value = val
	v.isSet = true
}

func (v NullableInstrumentState) IsSet() bool {
	return v.isSet
}

func (v *NullableInstrumentState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstrumentState(val *InstrumentState) *NullableInstrumentState {
	return &NullableInstrumentState{value: val, isSet: true}
}

func (v NullableInstrumentState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstrumentState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

