/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OptionInstrument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptionInstrument{}

// OptionInstrument struct for OptionInstrument
type OptionInstrument struct {
	ChainId *string `json:"chain_id,omitempty"`
	ChainSymbol *string `json:"chain_symbol,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	ExpirationDate *string `json:"expiration_date,omitempty"`
	Id *string `json:"id,omitempty"`
	IssueDate *string `json:"issue_date,omitempty"`
	MinTicks *MinTicks `json:"min_ticks,omitempty"`
	RhsTradability *string `json:"rhs_tradability,omitempty"`
	State *string `json:"state,omitempty"`
	StrikePrice *string `json:"strike_price,omitempty"`
	Tradability *string `json:"tradability,omitempty"`
	Type *string `json:"type,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewOptionInstrument instantiates a new OptionInstrument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionInstrument() *OptionInstrument {
	this := OptionInstrument{}
	return &this
}

// NewOptionInstrumentWithDefaults instantiates a new OptionInstrument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionInstrumentWithDefaults() *OptionInstrument {
	this := OptionInstrument{}
	return &this
}

// GetChainId returns the ChainId field value if set, zero value otherwise.
func (o *OptionInstrument) GetChainId() string {
	if o == nil || IsNil(o.ChainId) {
		var ret string
		return ret
	}
	return *o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetChainIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChainId) {
		return nil, false
	}
	return o.ChainId, true
}

// HasChainId returns a boolean if a field has been set.
func (o *OptionInstrument) HasChainId() bool {
	if o != nil && !IsNil(o.ChainId) {
		return true
	}

	return false
}

// SetChainId gets a reference to the given string and assigns it to the ChainId field.
func (o *OptionInstrument) SetChainId(v string) {
	o.ChainId = &v
}

// GetChainSymbol returns the ChainSymbol field value if set, zero value otherwise.
func (o *OptionInstrument) GetChainSymbol() string {
	if o == nil || IsNil(o.ChainSymbol) {
		var ret string
		return ret
	}
	return *o.ChainSymbol
}

// GetChainSymbolOk returns a tuple with the ChainSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetChainSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.ChainSymbol) {
		return nil, false
	}
	return o.ChainSymbol, true
}

// HasChainSymbol returns a boolean if a field has been set.
func (o *OptionInstrument) HasChainSymbol() bool {
	if o != nil && !IsNil(o.ChainSymbol) {
		return true
	}

	return false
}

// SetChainSymbol gets a reference to the given string and assigns it to the ChainSymbol field.
func (o *OptionInstrument) SetChainSymbol(v string) {
	o.ChainSymbol = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OptionInstrument) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OptionInstrument) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *OptionInstrument) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *OptionInstrument) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *OptionInstrument) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *OptionInstrument) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OptionInstrument) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OptionInstrument) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OptionInstrument) SetId(v string) {
	o.Id = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *OptionInstrument) GetIssueDate() string {
	if o == nil || IsNil(o.IssueDate) {
		var ret string
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetIssueDateOk() (*string, bool) {
	if o == nil || IsNil(o.IssueDate) {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *OptionInstrument) HasIssueDate() bool {
	if o != nil && !IsNil(o.IssueDate) {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given string and assigns it to the IssueDate field.
func (o *OptionInstrument) SetIssueDate(v string) {
	o.IssueDate = &v
}

// GetMinTicks returns the MinTicks field value if set, zero value otherwise.
func (o *OptionInstrument) GetMinTicks() MinTicks {
	if o == nil || IsNil(o.MinTicks) {
		var ret MinTicks
		return ret
	}
	return *o.MinTicks
}

// GetMinTicksOk returns a tuple with the MinTicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetMinTicksOk() (*MinTicks, bool) {
	if o == nil || IsNil(o.MinTicks) {
		return nil, false
	}
	return o.MinTicks, true
}

// HasMinTicks returns a boolean if a field has been set.
func (o *OptionInstrument) HasMinTicks() bool {
	if o != nil && !IsNil(o.MinTicks) {
		return true
	}

	return false
}

// SetMinTicks gets a reference to the given MinTicks and assigns it to the MinTicks field.
func (o *OptionInstrument) SetMinTicks(v MinTicks) {
	o.MinTicks = &v
}

// GetRhsTradability returns the RhsTradability field value if set, zero value otherwise.
func (o *OptionInstrument) GetRhsTradability() string {
	if o == nil || IsNil(o.RhsTradability) {
		var ret string
		return ret
	}
	return *o.RhsTradability
}

// GetRhsTradabilityOk returns a tuple with the RhsTradability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetRhsTradabilityOk() (*string, bool) {
	if o == nil || IsNil(o.RhsTradability) {
		return nil, false
	}
	return o.RhsTradability, true
}

// HasRhsTradability returns a boolean if a field has been set.
func (o *OptionInstrument) HasRhsTradability() bool {
	if o != nil && !IsNil(o.RhsTradability) {
		return true
	}

	return false
}

// SetRhsTradability gets a reference to the given string and assigns it to the RhsTradability field.
func (o *OptionInstrument) SetRhsTradability(v string) {
	o.RhsTradability = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *OptionInstrument) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *OptionInstrument) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *OptionInstrument) SetState(v string) {
	o.State = &v
}

// GetStrikePrice returns the StrikePrice field value if set, zero value otherwise.
func (o *OptionInstrument) GetStrikePrice() string {
	if o == nil || IsNil(o.StrikePrice) {
		var ret string
		return ret
	}
	return *o.StrikePrice
}

// GetStrikePriceOk returns a tuple with the StrikePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetStrikePriceOk() (*string, bool) {
	if o == nil || IsNil(o.StrikePrice) {
		return nil, false
	}
	return o.StrikePrice, true
}

// HasStrikePrice returns a boolean if a field has been set.
func (o *OptionInstrument) HasStrikePrice() bool {
	if o != nil && !IsNil(o.StrikePrice) {
		return true
	}

	return false
}

// SetStrikePrice gets a reference to the given string and assigns it to the StrikePrice field.
func (o *OptionInstrument) SetStrikePrice(v string) {
	o.StrikePrice = &v
}

// GetTradability returns the Tradability field value if set, zero value otherwise.
func (o *OptionInstrument) GetTradability() string {
	if o == nil || IsNil(o.Tradability) {
		var ret string
		return ret
	}
	return *o.Tradability
}

// GetTradabilityOk returns a tuple with the Tradability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetTradabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Tradability) {
		return nil, false
	}
	return o.Tradability, true
}

// HasTradability returns a boolean if a field has been set.
func (o *OptionInstrument) HasTradability() bool {
	if o != nil && !IsNil(o.Tradability) {
		return true
	}

	return false
}

// SetTradability gets a reference to the given string and assigns it to the Tradability field.
func (o *OptionInstrument) SetTradability(v string) {
	o.Tradability = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OptionInstrument) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OptionInstrument) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OptionInstrument) SetType(v string) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OptionInstrument) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OptionInstrument) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *OptionInstrument) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *OptionInstrument) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionInstrument) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *OptionInstrument) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *OptionInstrument) SetUrl(v string) {
	o.Url = &v
}

func (o OptionInstrument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptionInstrument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChainId) {
		toSerialize["chain_id"] = o.ChainId
	}
	if !IsNil(o.ChainSymbol) {
		toSerialize["chain_symbol"] = o.ChainSymbol
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IssueDate) {
		toSerialize["issue_date"] = o.IssueDate
	}
	if !IsNil(o.MinTicks) {
		toSerialize["min_ticks"] = o.MinTicks
	}
	if !IsNil(o.RhsTradability) {
		toSerialize["rhs_tradability"] = o.RhsTradability
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.StrikePrice) {
		toSerialize["strike_price"] = o.StrikePrice
	}
	if !IsNil(o.Tradability) {
		toSerialize["tradability"] = o.Tradability
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableOptionInstrument struct {
	value *OptionInstrument
	isSet bool
}

func (v NullableOptionInstrument) Get() *OptionInstrument {
	return v.value
}

func (v *NullableOptionInstrument) Set(val *OptionInstrument) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionInstrument) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionInstrument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionInstrument(val *OptionInstrument) *NullableOptionInstrument {
	return &NullableOptionInstrument{value: val, isSet: true}
}

func (v NullableOptionInstrument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionInstrument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


