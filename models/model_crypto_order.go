/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CryptoOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoOrder{}

// CryptoOrder struct for CryptoOrder
type CryptoOrder struct {
	AccountId *string `json:"account_id,omitempty"`
	CurrencyPairId *string `json:"currency_pair_id,omitempty"`
	Price *string `json:"price,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
	RefId *string `json:"ref_id,omitempty"`
	Side *Side `json:"side,omitempty"`
	TimeInForce *TimeInForce `json:"time_in_force,omitempty"`
	Type *ExecutionType `json:"type,omitempty"`
}

// NewCryptoOrder instantiates a new CryptoOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoOrder() *CryptoOrder {
	this := CryptoOrder{}
	return &this
}

// NewCryptoOrderWithDefaults instantiates a new CryptoOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoOrderWithDefaults() *CryptoOrder {
	this := CryptoOrder{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CryptoOrder) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrder) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CryptoOrder) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CryptoOrder) SetAccountId(v string) {
	o.AccountId = &v
}

// GetCurrencyPairId returns the CurrencyPairId field value if set, zero value otherwise.
func (o *CryptoOrder) GetCurrencyPairId() string {
	if o == nil || IsNil(o.CurrencyPairId) {
		var ret string
		return ret
	}
	return *o.CurrencyPairId
}

// GetCurrencyPairIdOk returns a tuple with the CurrencyPairId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrder) GetCurrencyPairIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyPairId) {
		return nil, false
	}
	return o.CurrencyPairId, true
}

// HasCurrencyPairId returns a boolean if a field has been set.
func (o *CryptoOrder) HasCurrencyPairId() bool {
	if o != nil && !IsNil(o.CurrencyPairId) {
		return true
	}

	return false
}

// SetCurrencyPairId gets a reference to the given string and assigns it to the CurrencyPairId field.
func (o *CryptoOrder) SetCurrencyPairId(v string) {
	o.CurrencyPairId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CryptoOrder) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrder) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CryptoOrder) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *CryptoOrder) SetPrice(v string) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *CryptoOrder) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrder) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *CryptoOrder) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *CryptoOrder) SetQuantity(v string) {
	o.Quantity = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *CryptoOrder) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrder) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *CryptoOrder) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *CryptoOrder) SetRefId(v string) {
	o.RefId = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *CryptoOrder) GetSide() Side {
	if o == nil || IsNil(o.Side) {
		var ret Side
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrder) GetSideOk() (*Side, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *CryptoOrder) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given Side and assigns it to the Side field.
func (o *CryptoOrder) SetSide(v Side) {
	o.Side = &v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *CryptoOrder) GetTimeInForce() TimeInForce {
	if o == nil || IsNil(o.TimeInForce) {
		var ret TimeInForce
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrder) GetTimeInForceOk() (*TimeInForce, bool) {
	if o == nil || IsNil(o.TimeInForce) {
		return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *CryptoOrder) HasTimeInForce() bool {
	if o != nil && !IsNil(o.TimeInForce) {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given TimeInForce and assigns it to the TimeInForce field.
func (o *CryptoOrder) SetTimeInForce(v TimeInForce) {
	o.TimeInForce = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CryptoOrder) GetType() ExecutionType {
	if o == nil || IsNil(o.Type) {
		var ret ExecutionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrder) GetTypeOk() (*ExecutionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CryptoOrder) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ExecutionType and assigns it to the Type field.
func (o *CryptoOrder) SetType(v ExecutionType) {
	o.Type = &v
}

func (o CryptoOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.CurrencyPairId) {
		toSerialize["currency_pair_id"] = o.CurrencyPairId
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.TimeInForce) {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCryptoOrder struct {
	value *CryptoOrder
	isSet bool
}

func (v NullableCryptoOrder) Get() *CryptoOrder {
	return v.value
}

func (v *NullableCryptoOrder) Set(val *CryptoOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoOrder(val *CryptoOrder) *NullableCryptoOrder {
	return &NullableCryptoOrder{value: val, isSet: true}
}

func (v NullableCryptoOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


