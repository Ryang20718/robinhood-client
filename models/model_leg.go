/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Leg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Leg{}

// Leg struct for Leg
type Leg struct {
	Option *string `json:"option,omitempty"`
	PositionEffect *string `json:"position_effect,omitempty"`
	RatioQuantity *string `json:"ratio_quantity,omitempty"`
	Side *Side `json:"side,omitempty"`
}

// NewLeg instantiates a new Leg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeg() *Leg {
	this := Leg{}
	return &this
}

// NewLegWithDefaults instantiates a new Leg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegWithDefaults() *Leg {
	this := Leg{}
	return &this
}

// GetOption returns the Option field value if set, zero value otherwise.
func (o *Leg) GetOption() string {
	if o == nil || IsNil(o.Option) {
		var ret string
		return ret
	}
	return *o.Option
}

// GetOptionOk returns a tuple with the Option field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetOptionOk() (*string, bool) {
	if o == nil || IsNil(o.Option) {
		return nil, false
	}
	return o.Option, true
}

// HasOption returns a boolean if a field has been set.
func (o *Leg) HasOption() bool {
	if o != nil && !IsNil(o.Option) {
		return true
	}

	return false
}

// SetOption gets a reference to the given string and assigns it to the Option field.
func (o *Leg) SetOption(v string) {
	o.Option = &v
}

// GetPositionEffect returns the PositionEffect field value if set, zero value otherwise.
func (o *Leg) GetPositionEffect() string {
	if o == nil || IsNil(o.PositionEffect) {
		var ret string
		return ret
	}
	return *o.PositionEffect
}

// GetPositionEffectOk returns a tuple with the PositionEffect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetPositionEffectOk() (*string, bool) {
	if o == nil || IsNil(o.PositionEffect) {
		return nil, false
	}
	return o.PositionEffect, true
}

// HasPositionEffect returns a boolean if a field has been set.
func (o *Leg) HasPositionEffect() bool {
	if o != nil && !IsNil(o.PositionEffect) {
		return true
	}

	return false
}

// SetPositionEffect gets a reference to the given string and assigns it to the PositionEffect field.
func (o *Leg) SetPositionEffect(v string) {
	o.PositionEffect = &v
}

// GetRatioQuantity returns the RatioQuantity field value if set, zero value otherwise.
func (o *Leg) GetRatioQuantity() string {
	if o == nil || IsNil(o.RatioQuantity) {
		var ret string
		return ret
	}
	return *o.RatioQuantity
}

// GetRatioQuantityOk returns a tuple with the RatioQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetRatioQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.RatioQuantity) {
		return nil, false
	}
	return o.RatioQuantity, true
}

// HasRatioQuantity returns a boolean if a field has been set.
func (o *Leg) HasRatioQuantity() bool {
	if o != nil && !IsNil(o.RatioQuantity) {
		return true
	}

	return false
}

// SetRatioQuantity gets a reference to the given string and assigns it to the RatioQuantity field.
func (o *Leg) SetRatioQuantity(v string) {
	o.RatioQuantity = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *Leg) GetSide() Side {
	if o == nil || IsNil(o.Side) {
		var ret Side
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetSideOk() (*Side, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *Leg) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given Side and assigns it to the Side field.
func (o *Leg) SetSide(v Side) {
	o.Side = &v
}

func (o Leg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Leg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Option) {
		toSerialize["option"] = o.Option
	}
	if !IsNil(o.PositionEffect) {
		toSerialize["position_effect"] = o.PositionEffect
	}
	if !IsNil(o.RatioQuantity) {
		toSerialize["ratio_quantity"] = o.RatioQuantity
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	return toSerialize, nil
}

type NullableLeg struct {
	value *Leg
	isSet bool
}

func (v NullableLeg) Get() *Leg {
	return v.value
}

func (v *NullableLeg) Set(val *Leg) {
	v.value = val
	v.isSet = true
}

func (v NullableLeg) IsSet() bool {
	return v.isSet
}

func (v *NullableLeg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeg(val *Leg) *NullableLeg {
	return &NullableLeg{value: val, isSet: true}
}

func (v NullableLeg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


