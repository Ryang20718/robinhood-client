/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OptionOrderInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptionOrderInput{}

// OptionOrderInput struct for OptionOrderInput
type OptionOrderInput struct {
	Account *string `json:"account,omitempty"`
	Direction *Direction `json:"direction,omitempty"`
	Legs []Leg `json:"legs,omitempty"`
	OverrideDayTradeChecks *bool `json:"override_day_trade_checks,omitempty"`
	OverrideDtbpChecks *bool `json:"override_dtbp_checks,omitempty"`
	Price *string `json:"price,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
	RefId *string `json:"ref_id,omitempty"`
	TimeInForce *TimeInForce `json:"time_in_force,omitempty"`
	Trigger *Trigger `json:"trigger,omitempty"`
	Type *ExecutionType `json:"type,omitempty"`
}

// NewOptionOrderInput instantiates a new OptionOrderInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionOrderInput() *OptionOrderInput {
	this := OptionOrderInput{}
	return &this
}

// NewOptionOrderInputWithDefaults instantiates a new OptionOrderInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionOrderInputWithDefaults() *OptionOrderInput {
	this := OptionOrderInput{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *OptionOrderInput) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionOrderInput) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *OptionOrderInput) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *OptionOrderInput) SetAccount(v string) {
	o.Account = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *OptionOrderInput) GetDirection() Direction {
	if o == nil || IsNil(o.Direction) {
		var ret Direction
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionOrderInput) GetDirectionOk() (*Direction, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *OptionOrderInput) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given Direction and assigns it to the Direction field.
func (o *OptionOrderInput) SetDirection(v Direction) {
	o.Direction = &v
}

// GetLegs returns the Legs field value if set, zero value otherwise.
func (o *OptionOrderInput) GetLegs() []Leg {
	if o == nil || IsNil(o.Legs) {
		var ret []Leg
		return ret
	}
	return o.Legs
}

// GetLegsOk returns a tuple with the Legs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionOrderInput) GetLegsOk() ([]Leg, bool) {
	if o == nil || IsNil(o.Legs) {
		return nil, false
	}
	return o.Legs, true
}

// HasLegs returns a boolean if a field has been set.
func (o *OptionOrderInput) HasLegs() bool {
	if o != nil && !IsNil(o.Legs) {
		return true
	}

	return false
}

// SetLegs gets a reference to the given []Leg and assigns it to the Legs field.
func (o *OptionOrderInput) SetLegs(v []Leg) {
	o.Legs = v
}

// GetOverrideDayTradeChecks returns the OverrideDayTradeChecks field value if set, zero value otherwise.
func (o *OptionOrderInput) GetOverrideDayTradeChecks() bool {
	if o == nil || IsNil(o.OverrideDayTradeChecks) {
		var ret bool
		return ret
	}
	return *o.OverrideDayTradeChecks
}

// GetOverrideDayTradeChecksOk returns a tuple with the OverrideDayTradeChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionOrderInput) GetOverrideDayTradeChecksOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideDayTradeChecks) {
		return nil, false
	}
	return o.OverrideDayTradeChecks, true
}

// HasOverrideDayTradeChecks returns a boolean if a field has been set.
func (o *OptionOrderInput) HasOverrideDayTradeChecks() bool {
	if o != nil && !IsNil(o.OverrideDayTradeChecks) {
		return true
	}

	return false
}

// SetOverrideDayTradeChecks gets a reference to the given bool and assigns it to the OverrideDayTradeChecks field.
func (o *OptionOrderInput) SetOverrideDayTradeChecks(v bool) {
	o.OverrideDayTradeChecks = &v
}

// GetOverrideDtbpChecks returns the OverrideDtbpChecks field value if set, zero value otherwise.
func (o *OptionOrderInput) GetOverrideDtbpChecks() bool {
	if o == nil || IsNil(o.OverrideDtbpChecks) {
		var ret bool
		return ret
	}
	return *o.OverrideDtbpChecks
}

// GetOverrideDtbpChecksOk returns a tuple with the OverrideDtbpChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionOrderInput) GetOverrideDtbpChecksOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideDtbpChecks) {
		return nil, false
	}
	return o.OverrideDtbpChecks, true
}

// HasOverrideDtbpChecks returns a boolean if a field has been set.
func (o *OptionOrderInput) HasOverrideDtbpChecks() bool {
	if o != nil && !IsNil(o.OverrideDtbpChecks) {
		return true
	}

	return false
}

// SetOverrideDtbpChecks gets a reference to the given bool and assigns it to the OverrideDtbpChecks field.
func (o *OptionOrderInput) SetOverrideDtbpChecks(v bool) {
	o.OverrideDtbpChecks = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *OptionOrderInput) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionOrderInput) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *OptionOrderInput) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *OptionOrderInput) SetPrice(v string) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OptionOrderInput) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionOrderInput) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OptionOrderInput) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *OptionOrderInput) SetQuantity(v string) {
	o.Quantity = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *OptionOrderInput) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionOrderInput) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *OptionOrderInput) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *OptionOrderInput) SetRefId(v string) {
	o.RefId = &v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *OptionOrderInput) GetTimeInForce() TimeInForce {
	if o == nil || IsNil(o.TimeInForce) {
		var ret TimeInForce
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionOrderInput) GetTimeInForceOk() (*TimeInForce, bool) {
	if o == nil || IsNil(o.TimeInForce) {
		return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *OptionOrderInput) HasTimeInForce() bool {
	if o != nil && !IsNil(o.TimeInForce) {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given TimeInForce and assigns it to the TimeInForce field.
func (o *OptionOrderInput) SetTimeInForce(v TimeInForce) {
	o.TimeInForce = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *OptionOrderInput) GetTrigger() Trigger {
	if o == nil || IsNil(o.Trigger) {
		var ret Trigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionOrderInput) GetTriggerOk() (*Trigger, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *OptionOrderInput) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given Trigger and assigns it to the Trigger field.
func (o *OptionOrderInput) SetTrigger(v Trigger) {
	o.Trigger = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OptionOrderInput) GetType() ExecutionType {
	if o == nil || IsNil(o.Type) {
		var ret ExecutionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionOrderInput) GetTypeOk() (*ExecutionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OptionOrderInput) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ExecutionType and assigns it to the Type field.
func (o *OptionOrderInput) SetType(v ExecutionType) {
	o.Type = &v
}

func (o OptionOrderInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptionOrderInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Legs) {
		toSerialize["legs"] = o.Legs
	}
	if !IsNil(o.OverrideDayTradeChecks) {
		toSerialize["override_day_trade_checks"] = o.OverrideDayTradeChecks
	}
	if !IsNil(o.OverrideDtbpChecks) {
		toSerialize["override_dtbp_checks"] = o.OverrideDtbpChecks
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.TimeInForce) {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableOptionOrderInput struct {
	value *OptionOrderInput
	isSet bool
}

func (v NullableOptionOrderInput) Get() *OptionOrderInput {
	return v.value
}

func (v *NullableOptionOrderInput) Set(val *OptionOrderInput) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionOrderInput) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionOrderInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionOrderInput(val *OptionOrderInput) *NullableOptionOrderInput {
	return &NullableOptionOrderInput{value: val, isSet: true}
}

func (v NullableOptionOrderInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionOrderInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


