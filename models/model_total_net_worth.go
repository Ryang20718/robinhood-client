/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TotalNetWorth the model 'TotalNetWorth'
type TotalNetWorth string

// List of TotalNetWorth
const (
	_0_24999 TotalNetWorth = "0_24999"
	_25000_49999 TotalNetWorth = "25000_49999"
	_50000_64999 TotalNetWorth = "50000_64999"
	_65000_99999 TotalNetWorth = "65000_99999"
	_100000_149999 TotalNetWorth = "100000_149999"
	_150000_199999 TotalNetWorth = "150000_199999"
	_250000_499999 TotalNetWorth = "250000_499999"
	_500000_999999 TotalNetWorth = "500000_999999"
	_1000000_INF TotalNetWorth = "1000000_inf"
)

// All allowed values of TotalNetWorth enum
var AllowedTotalNetWorthEnumValues = []TotalNetWorth{
	"0_24999",
	"25000_49999",
	"50000_64999",
	"65000_99999",
	"100000_149999",
	"150000_199999",
	"250000_499999",
	"500000_999999",
	"1000000_inf",
}

func (v *TotalNetWorth) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TotalNetWorth(value)
	for _, existing := range AllowedTotalNetWorthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TotalNetWorth", value)
}

// NewTotalNetWorthFromValue returns a pointer to a valid TotalNetWorth
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTotalNetWorthFromValue(v string) (*TotalNetWorth, error) {
	ev := TotalNetWorth(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TotalNetWorth: valid values are %v", v, AllowedTotalNetWorthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TotalNetWorth) IsValid() bool {
	for _, existing := range AllowedTotalNetWorthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TotalNetWorth value
func (v TotalNetWorth) Ptr() *TotalNetWorth {
	return &v
}

type NullableTotalNetWorth struct {
	value *TotalNetWorth
	isSet bool
}

func (v NullableTotalNetWorth) Get() *TotalNetWorth {
	return v.value
}

func (v *NullableTotalNetWorth) Set(val *TotalNetWorth) {
	v.value = val
	v.isSet = true
}

func (v NullableTotalNetWorth) IsSet() bool {
	return v.isSet
}

func (v *NullableTotalNetWorth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotalNetWorth(val *TotalNetWorth) *NullableTotalNetWorth {
	return &NullableTotalNetWorth{value: val, isSet: true}
}

func (v NullableTotalNetWorth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotalNetWorth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

