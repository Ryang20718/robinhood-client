/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CryptoCurrencyPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoCurrencyPair{}

// CryptoCurrencyPair struct for CryptoCurrencyPair
type CryptoCurrencyPair struct {
	AssetCurrency *CryptoAssetCurrency `json:"asset_currency,omitempty"`
	Id *string `json:"id,omitempty"`
	MaxOrderSize *string `json:"max_order_size,omitempty"`
	MinOrderPriceIncrement *string `json:"min_order_price_increment,omitempty"`
	MinOrderSize *string `json:"min_order_size,omitempty"`
	Name *string `json:"name,omitempty"`
	QuoteCurrency *QuoteCurrency `json:"quote_currency,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Tradability *string `json:"tradability,omitempty"`
}

// NewCryptoCurrencyPair instantiates a new CryptoCurrencyPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoCurrencyPair() *CryptoCurrencyPair {
	this := CryptoCurrencyPair{}
	return &this
}

// NewCryptoCurrencyPairWithDefaults instantiates a new CryptoCurrencyPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoCurrencyPairWithDefaults() *CryptoCurrencyPair {
	this := CryptoCurrencyPair{}
	return &this
}

// GetAssetCurrency returns the AssetCurrency field value if set, zero value otherwise.
func (o *CryptoCurrencyPair) GetAssetCurrency() CryptoAssetCurrency {
	if o == nil || IsNil(o.AssetCurrency) {
		var ret CryptoAssetCurrency
		return ret
	}
	return *o.AssetCurrency
}

// GetAssetCurrencyOk returns a tuple with the AssetCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyPair) GetAssetCurrencyOk() (*CryptoAssetCurrency, bool) {
	if o == nil || IsNil(o.AssetCurrency) {
		return nil, false
	}
	return o.AssetCurrency, true
}

// HasAssetCurrency returns a boolean if a field has been set.
func (o *CryptoCurrencyPair) HasAssetCurrency() bool {
	if o != nil && !IsNil(o.AssetCurrency) {
		return true
	}

	return false
}

// SetAssetCurrency gets a reference to the given CryptoAssetCurrency and assigns it to the AssetCurrency field.
func (o *CryptoCurrencyPair) SetAssetCurrency(v CryptoAssetCurrency) {
	o.AssetCurrency = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CryptoCurrencyPair) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyPair) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CryptoCurrencyPair) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CryptoCurrencyPair) SetId(v string) {
	o.Id = &v
}

// GetMaxOrderSize returns the MaxOrderSize field value if set, zero value otherwise.
func (o *CryptoCurrencyPair) GetMaxOrderSize() string {
	if o == nil || IsNil(o.MaxOrderSize) {
		var ret string
		return ret
	}
	return *o.MaxOrderSize
}

// GetMaxOrderSizeOk returns a tuple with the MaxOrderSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyPair) GetMaxOrderSizeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxOrderSize) {
		return nil, false
	}
	return o.MaxOrderSize, true
}

// HasMaxOrderSize returns a boolean if a field has been set.
func (o *CryptoCurrencyPair) HasMaxOrderSize() bool {
	if o != nil && !IsNil(o.MaxOrderSize) {
		return true
	}

	return false
}

// SetMaxOrderSize gets a reference to the given string and assigns it to the MaxOrderSize field.
func (o *CryptoCurrencyPair) SetMaxOrderSize(v string) {
	o.MaxOrderSize = &v
}

// GetMinOrderPriceIncrement returns the MinOrderPriceIncrement field value if set, zero value otherwise.
func (o *CryptoCurrencyPair) GetMinOrderPriceIncrement() string {
	if o == nil || IsNil(o.MinOrderPriceIncrement) {
		var ret string
		return ret
	}
	return *o.MinOrderPriceIncrement
}

// GetMinOrderPriceIncrementOk returns a tuple with the MinOrderPriceIncrement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyPair) GetMinOrderPriceIncrementOk() (*string, bool) {
	if o == nil || IsNil(o.MinOrderPriceIncrement) {
		return nil, false
	}
	return o.MinOrderPriceIncrement, true
}

// HasMinOrderPriceIncrement returns a boolean if a field has been set.
func (o *CryptoCurrencyPair) HasMinOrderPriceIncrement() bool {
	if o != nil && !IsNil(o.MinOrderPriceIncrement) {
		return true
	}

	return false
}

// SetMinOrderPriceIncrement gets a reference to the given string and assigns it to the MinOrderPriceIncrement field.
func (o *CryptoCurrencyPair) SetMinOrderPriceIncrement(v string) {
	o.MinOrderPriceIncrement = &v
}

// GetMinOrderSize returns the MinOrderSize field value if set, zero value otherwise.
func (o *CryptoCurrencyPair) GetMinOrderSize() string {
	if o == nil || IsNil(o.MinOrderSize) {
		var ret string
		return ret
	}
	return *o.MinOrderSize
}

// GetMinOrderSizeOk returns a tuple with the MinOrderSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyPair) GetMinOrderSizeOk() (*string, bool) {
	if o == nil || IsNil(o.MinOrderSize) {
		return nil, false
	}
	return o.MinOrderSize, true
}

// HasMinOrderSize returns a boolean if a field has been set.
func (o *CryptoCurrencyPair) HasMinOrderSize() bool {
	if o != nil && !IsNil(o.MinOrderSize) {
		return true
	}

	return false
}

// SetMinOrderSize gets a reference to the given string and assigns it to the MinOrderSize field.
func (o *CryptoCurrencyPair) SetMinOrderSize(v string) {
	o.MinOrderSize = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CryptoCurrencyPair) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyPair) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CryptoCurrencyPair) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CryptoCurrencyPair) SetName(v string) {
	o.Name = &v
}

// GetQuoteCurrency returns the QuoteCurrency field value if set, zero value otherwise.
func (o *CryptoCurrencyPair) GetQuoteCurrency() QuoteCurrency {
	if o == nil || IsNil(o.QuoteCurrency) {
		var ret QuoteCurrency
		return ret
	}
	return *o.QuoteCurrency
}

// GetQuoteCurrencyOk returns a tuple with the QuoteCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyPair) GetQuoteCurrencyOk() (*QuoteCurrency, bool) {
	if o == nil || IsNil(o.QuoteCurrency) {
		return nil, false
	}
	return o.QuoteCurrency, true
}

// HasQuoteCurrency returns a boolean if a field has been set.
func (o *CryptoCurrencyPair) HasQuoteCurrency() bool {
	if o != nil && !IsNil(o.QuoteCurrency) {
		return true
	}

	return false
}

// SetQuoteCurrency gets a reference to the given QuoteCurrency and assigns it to the QuoteCurrency field.
func (o *CryptoCurrencyPair) SetQuoteCurrency(v QuoteCurrency) {
	o.QuoteCurrency = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CryptoCurrencyPair) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyPair) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CryptoCurrencyPair) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CryptoCurrencyPair) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTradability returns the Tradability field value if set, zero value otherwise.
func (o *CryptoCurrencyPair) GetTradability() string {
	if o == nil || IsNil(o.Tradability) {
		var ret string
		return ret
	}
	return *o.Tradability
}

// GetTradabilityOk returns a tuple with the Tradability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoCurrencyPair) GetTradabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Tradability) {
		return nil, false
	}
	return o.Tradability, true
}

// HasTradability returns a boolean if a field has been set.
func (o *CryptoCurrencyPair) HasTradability() bool {
	if o != nil && !IsNil(o.Tradability) {
		return true
	}

	return false
}

// SetTradability gets a reference to the given string and assigns it to the Tradability field.
func (o *CryptoCurrencyPair) SetTradability(v string) {
	o.Tradability = &v
}

func (o CryptoCurrencyPair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoCurrencyPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetCurrency) {
		toSerialize["asset_currency"] = o.AssetCurrency
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MaxOrderSize) {
		toSerialize["max_order_size"] = o.MaxOrderSize
	}
	if !IsNil(o.MinOrderPriceIncrement) {
		toSerialize["min_order_price_increment"] = o.MinOrderPriceIncrement
	}
	if !IsNil(o.MinOrderSize) {
		toSerialize["min_order_size"] = o.MinOrderSize
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.QuoteCurrency) {
		toSerialize["quote_currency"] = o.QuoteCurrency
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Tradability) {
		toSerialize["tradability"] = o.Tradability
	}
	return toSerialize, nil
}

type NullableCryptoCurrencyPair struct {
	value *CryptoCurrencyPair
	isSet bool
}

func (v NullableCryptoCurrencyPair) Get() *CryptoCurrencyPair {
	return v.value
}

func (v *NullableCryptoCurrencyPair) Set(val *CryptoCurrencyPair) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoCurrencyPair) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoCurrencyPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoCurrencyPair(val *CryptoCurrencyPair) *NullableCryptoCurrencyPair {
	return &NullableCryptoCurrencyPair{value: val, isSet: true}
}

func (v NullableCryptoCurrencyPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoCurrencyPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


