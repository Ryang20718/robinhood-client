/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Position type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Position{}

// Position struct for Position
type Position struct {
	Account *string `json:"account,omitempty"`
	AverageBuyPrice *string `json:"average_buy_price,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Instrument *string `json:"instrument,omitempty"`
	IntradayAverageBuyPrice *string `json:"intraday_average_buy_price,omitempty"`
	IntradayQuantity *string `json:"intraday_quantity,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
	SharesHeldForBuys *string `json:"shares_held_for_buys,omitempty"`
	SharesHeldForSells *string `json:"shares_held_for_sells,omitempty"`
	SharesHeldForStockGrants *string `json:"shares_held_for_stock_grants,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewPosition instantiates a new Position object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPosition() *Position {
	this := Position{}
	return &this
}

// NewPositionWithDefaults instantiates a new Position object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionWithDefaults() *Position {
	this := Position{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Position) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Position) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *Position) SetAccount(v string) {
	o.Account = &v
}

// GetAverageBuyPrice returns the AverageBuyPrice field value if set, zero value otherwise.
func (o *Position) GetAverageBuyPrice() string {
	if o == nil || IsNil(o.AverageBuyPrice) {
		var ret string
		return ret
	}
	return *o.AverageBuyPrice
}

// GetAverageBuyPriceOk returns a tuple with the AverageBuyPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetAverageBuyPriceOk() (*string, bool) {
	if o == nil || IsNil(o.AverageBuyPrice) {
		return nil, false
	}
	return o.AverageBuyPrice, true
}

// HasAverageBuyPrice returns a boolean if a field has been set.
func (o *Position) HasAverageBuyPrice() bool {
	if o != nil && !IsNil(o.AverageBuyPrice) {
		return true
	}

	return false
}

// SetAverageBuyPrice gets a reference to the given string and assigns it to the AverageBuyPrice field.
func (o *Position) SetAverageBuyPrice(v string) {
	o.AverageBuyPrice = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Position) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Position) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Position) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetInstrument returns the Instrument field value if set, zero value otherwise.
func (o *Position) GetInstrument() string {
	if o == nil || IsNil(o.Instrument) {
		var ret string
		return ret
	}
	return *o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetInstrumentOk() (*string, bool) {
	if o == nil || IsNil(o.Instrument) {
		return nil, false
	}
	return o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *Position) HasInstrument() bool {
	if o != nil && !IsNil(o.Instrument) {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given string and assigns it to the Instrument field.
func (o *Position) SetInstrument(v string) {
	o.Instrument = &v
}

// GetIntradayAverageBuyPrice returns the IntradayAverageBuyPrice field value if set, zero value otherwise.
func (o *Position) GetIntradayAverageBuyPrice() string {
	if o == nil || IsNil(o.IntradayAverageBuyPrice) {
		var ret string
		return ret
	}
	return *o.IntradayAverageBuyPrice
}

// GetIntradayAverageBuyPriceOk returns a tuple with the IntradayAverageBuyPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetIntradayAverageBuyPriceOk() (*string, bool) {
	if o == nil || IsNil(o.IntradayAverageBuyPrice) {
		return nil, false
	}
	return o.IntradayAverageBuyPrice, true
}

// HasIntradayAverageBuyPrice returns a boolean if a field has been set.
func (o *Position) HasIntradayAverageBuyPrice() bool {
	if o != nil && !IsNil(o.IntradayAverageBuyPrice) {
		return true
	}

	return false
}

// SetIntradayAverageBuyPrice gets a reference to the given string and assigns it to the IntradayAverageBuyPrice field.
func (o *Position) SetIntradayAverageBuyPrice(v string) {
	o.IntradayAverageBuyPrice = &v
}

// GetIntradayQuantity returns the IntradayQuantity field value if set, zero value otherwise.
func (o *Position) GetIntradayQuantity() string {
	if o == nil || IsNil(o.IntradayQuantity) {
		var ret string
		return ret
	}
	return *o.IntradayQuantity
}

// GetIntradayQuantityOk returns a tuple with the IntradayQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetIntradayQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.IntradayQuantity) {
		return nil, false
	}
	return o.IntradayQuantity, true
}

// HasIntradayQuantity returns a boolean if a field has been set.
func (o *Position) HasIntradayQuantity() bool {
	if o != nil && !IsNil(o.IntradayQuantity) {
		return true
	}

	return false
}

// SetIntradayQuantity gets a reference to the given string and assigns it to the IntradayQuantity field.
func (o *Position) SetIntradayQuantity(v string) {
	o.IntradayQuantity = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Position) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Position) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *Position) SetQuantity(v string) {
	o.Quantity = &v
}

// GetSharesHeldForBuys returns the SharesHeldForBuys field value if set, zero value otherwise.
func (o *Position) GetSharesHeldForBuys() string {
	if o == nil || IsNil(o.SharesHeldForBuys) {
		var ret string
		return ret
	}
	return *o.SharesHeldForBuys
}

// GetSharesHeldForBuysOk returns a tuple with the SharesHeldForBuys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetSharesHeldForBuysOk() (*string, bool) {
	if o == nil || IsNil(o.SharesHeldForBuys) {
		return nil, false
	}
	return o.SharesHeldForBuys, true
}

// HasSharesHeldForBuys returns a boolean if a field has been set.
func (o *Position) HasSharesHeldForBuys() bool {
	if o != nil && !IsNil(o.SharesHeldForBuys) {
		return true
	}

	return false
}

// SetSharesHeldForBuys gets a reference to the given string and assigns it to the SharesHeldForBuys field.
func (o *Position) SetSharesHeldForBuys(v string) {
	o.SharesHeldForBuys = &v
}

// GetSharesHeldForSells returns the SharesHeldForSells field value if set, zero value otherwise.
func (o *Position) GetSharesHeldForSells() string {
	if o == nil || IsNil(o.SharesHeldForSells) {
		var ret string
		return ret
	}
	return *o.SharesHeldForSells
}

// GetSharesHeldForSellsOk returns a tuple with the SharesHeldForSells field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetSharesHeldForSellsOk() (*string, bool) {
	if o == nil || IsNil(o.SharesHeldForSells) {
		return nil, false
	}
	return o.SharesHeldForSells, true
}

// HasSharesHeldForSells returns a boolean if a field has been set.
func (o *Position) HasSharesHeldForSells() bool {
	if o != nil && !IsNil(o.SharesHeldForSells) {
		return true
	}

	return false
}

// SetSharesHeldForSells gets a reference to the given string and assigns it to the SharesHeldForSells field.
func (o *Position) SetSharesHeldForSells(v string) {
	o.SharesHeldForSells = &v
}

// GetSharesHeldForStockGrants returns the SharesHeldForStockGrants field value if set, zero value otherwise.
func (o *Position) GetSharesHeldForStockGrants() string {
	if o == nil || IsNil(o.SharesHeldForStockGrants) {
		var ret string
		return ret
	}
	return *o.SharesHeldForStockGrants
}

// GetSharesHeldForStockGrantsOk returns a tuple with the SharesHeldForStockGrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetSharesHeldForStockGrantsOk() (*string, bool) {
	if o == nil || IsNil(o.SharesHeldForStockGrants) {
		return nil, false
	}
	return o.SharesHeldForStockGrants, true
}

// HasSharesHeldForStockGrants returns a boolean if a field has been set.
func (o *Position) HasSharesHeldForStockGrants() bool {
	if o != nil && !IsNil(o.SharesHeldForStockGrants) {
		return true
	}

	return false
}

// SetSharesHeldForStockGrants gets a reference to the given string and assigns it to the SharesHeldForStockGrants field.
func (o *Position) SetSharesHeldForStockGrants(v string) {
	o.SharesHeldForStockGrants = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Position) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Position) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Position) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Position) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Position) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Position) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Position) SetUrl(v string) {
	o.Url = &v
}

func (o Position) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Position) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.AverageBuyPrice) {
		toSerialize["average_buy_price"] = o.AverageBuyPrice
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Instrument) {
		toSerialize["instrument"] = o.Instrument
	}
	if !IsNil(o.IntradayAverageBuyPrice) {
		toSerialize["intraday_average_buy_price"] = o.IntradayAverageBuyPrice
	}
	if !IsNil(o.IntradayQuantity) {
		toSerialize["intraday_quantity"] = o.IntradayQuantity
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.SharesHeldForBuys) {
		toSerialize["shares_held_for_buys"] = o.SharesHeldForBuys
	}
	if !IsNil(o.SharesHeldForSells) {
		toSerialize["shares_held_for_sells"] = o.SharesHeldForSells
	}
	if !IsNil(o.SharesHeldForStockGrants) {
		toSerialize["shares_held_for_stock_grants"] = o.SharesHeldForStockGrants
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullablePosition struct {
	value *Position
	isSet bool
}

func (v NullablePosition) Get() *Position {
	return v.value
}

func (v *NullablePosition) Set(val *Position) {
	v.value = val
	v.isSet = true
}

func (v NullablePosition) IsSet() bool {
	return v.isSet
}

func (v *NullablePosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePosition(val *Position) *NullablePosition {
	return &NullablePosition{value: val, isSet: true}
}

func (v NullablePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


