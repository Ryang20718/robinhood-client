/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TimeHorizon the model 'TimeHorizon'
type TimeHorizon string

// List of TimeHorizon
const (
	SHORT_TIME_HORIZON TimeHorizon = "short_time_horizon"
	MED_TIME_HORIZON TimeHorizon = "med_time_horizon"
	LONG_TIME_HORIZON TimeHorizon = "long_time_horizon"
)

// All allowed values of TimeHorizon enum
var AllowedTimeHorizonEnumValues = []TimeHorizon{
	"short_time_horizon",
	"med_time_horizon",
	"long_time_horizon",
}

func (v *TimeHorizon) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeHorizon(value)
	for _, existing := range AllowedTimeHorizonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeHorizon", value)
}

// NewTimeHorizonFromValue returns a pointer to a valid TimeHorizon
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeHorizonFromValue(v string) (*TimeHorizon, error) {
	ev := TimeHorizon(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeHorizon: valid values are %v", v, AllowedTimeHorizonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeHorizon) IsValid() bool {
	for _, existing := range AllowedTimeHorizonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeHorizon value
func (v TimeHorizon) Ptr() *TimeHorizon {
	return &v
}

type NullableTimeHorizon struct {
	value *TimeHorizon
	isSet bool
}

func (v NullableTimeHorizon) Get() *TimeHorizon {
	return v.value
}

func (v *NullableTimeHorizon) Set(val *TimeHorizon) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeHorizon) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeHorizon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeHorizon(val *TimeHorizon) *NullableTimeHorizon {
	return &NullableTimeHorizon{value: val, isSet: true}
}

func (v NullableTimeHorizon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeHorizon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

