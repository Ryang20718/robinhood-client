/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TaxBracket the model 'TaxBracket'
type TaxBracket string

// List of TaxBracket
const (
	_0_PCT TaxBracket = "0_pct"
	_20_PCT TaxBracket = "20_pct"
	_25_PCT TaxBracket = "25_pct"
	_28_PCT TaxBracket = "28_pct"
	_33_PCT TaxBracket = "33_pct"
	_35_PCT TaxBracket = "35_pct"
	_39_6_PCT TaxBracket = "39_6_pct"
)

// All allowed values of TaxBracket enum
var AllowedTaxBracketEnumValues = []TaxBracket{
	"0_pct",
	"20_pct",
	"25_pct",
	"28_pct",
	"33_pct",
	"35_pct",
	"39_6_pct",
}

func (v *TaxBracket) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaxBracket(value)
	for _, existing := range AllowedTaxBracketEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaxBracket", value)
}

// NewTaxBracketFromValue returns a pointer to a valid TaxBracket
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaxBracketFromValue(v string) (*TaxBracket, error) {
	ev := TaxBracket(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaxBracket: valid values are %v", v, AllowedTaxBracketEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaxBracket) IsValid() bool {
	for _, existing := range AllowedTaxBracketEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaxBracket value
func (v TaxBracket) Ptr() *TaxBracket {
	return &v
}

type NullableTaxBracket struct {
	value *TaxBracket
	isSet bool
}

func (v NullableTaxBracket) Get() *TaxBracket {
	return v.value
}

func (v *NullableTaxBracket) Set(val *TaxBracket) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxBracket) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxBracket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxBracket(val *TaxBracket) *NullableTaxBracket {
	return &NullableTaxBracket{value: val, isSet: true}
}

func (v NullableTaxBracket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxBracket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

