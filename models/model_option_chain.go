/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OptionChain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptionChain{}

// OptionChain struct for OptionChain
type OptionChain struct {
	CanOpenPosition *bool `json:"can_open_position,omitempty"`
	CashComponent map[string]interface{} `json:"cash_component,omitempty"`
	ExpirationDates []string `json:"expiration_dates,omitempty"`
	Id *string `json:"id,omitempty"`
	MinTicks *MinTicks `json:"min_ticks,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	TradeValueMultiplier *string `json:"trade_value_multiplier,omitempty"`
	UnderlyingInstruments []UnderlyingInstrument `json:"underlying_instruments,omitempty"`
}

// NewOptionChain instantiates a new OptionChain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionChain() *OptionChain {
	this := OptionChain{}
	return &this
}

// NewOptionChainWithDefaults instantiates a new OptionChain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionChainWithDefaults() *OptionChain {
	this := OptionChain{}
	return &this
}

// GetCanOpenPosition returns the CanOpenPosition field value if set, zero value otherwise.
func (o *OptionChain) GetCanOpenPosition() bool {
	if o == nil || IsNil(o.CanOpenPosition) {
		var ret bool
		return ret
	}
	return *o.CanOpenPosition
}

// GetCanOpenPositionOk returns a tuple with the CanOpenPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChain) GetCanOpenPositionOk() (*bool, bool) {
	if o == nil || IsNil(o.CanOpenPosition) {
		return nil, false
	}
	return o.CanOpenPosition, true
}

// HasCanOpenPosition returns a boolean if a field has been set.
func (o *OptionChain) HasCanOpenPosition() bool {
	if o != nil && !IsNil(o.CanOpenPosition) {
		return true
	}

	return false
}

// SetCanOpenPosition gets a reference to the given bool and assigns it to the CanOpenPosition field.
func (o *OptionChain) SetCanOpenPosition(v bool) {
	o.CanOpenPosition = &v
}

// GetCashComponent returns the CashComponent field value if set, zero value otherwise.
func (o *OptionChain) GetCashComponent() map[string]interface{} {
	if o == nil || IsNil(o.CashComponent) {
		var ret map[string]interface{}
		return ret
	}
	return o.CashComponent
}

// GetCashComponentOk returns a tuple with the CashComponent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChain) GetCashComponentOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CashComponent) {
		return map[string]interface{}{}, false
	}
	return o.CashComponent, true
}

// HasCashComponent returns a boolean if a field has been set.
func (o *OptionChain) HasCashComponent() bool {
	if o != nil && !IsNil(o.CashComponent) {
		return true
	}

	return false
}

// SetCashComponent gets a reference to the given map[string]interface{} and assigns it to the CashComponent field.
func (o *OptionChain) SetCashComponent(v map[string]interface{}) {
	o.CashComponent = v
}

// GetExpirationDates returns the ExpirationDates field value if set, zero value otherwise.
func (o *OptionChain) GetExpirationDates() []string {
	if o == nil || IsNil(o.ExpirationDates) {
		var ret []string
		return ret
	}
	return o.ExpirationDates
}

// GetExpirationDatesOk returns a tuple with the ExpirationDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChain) GetExpirationDatesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExpirationDates) {
		return nil, false
	}
	return o.ExpirationDates, true
}

// HasExpirationDates returns a boolean if a field has been set.
func (o *OptionChain) HasExpirationDates() bool {
	if o != nil && !IsNil(o.ExpirationDates) {
		return true
	}

	return false
}

// SetExpirationDates gets a reference to the given []string and assigns it to the ExpirationDates field.
func (o *OptionChain) SetExpirationDates(v []string) {
	o.ExpirationDates = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OptionChain) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChain) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OptionChain) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OptionChain) SetId(v string) {
	o.Id = &v
}

// GetMinTicks returns the MinTicks field value if set, zero value otherwise.
func (o *OptionChain) GetMinTicks() MinTicks {
	if o == nil || IsNil(o.MinTicks) {
		var ret MinTicks
		return ret
	}
	return *o.MinTicks
}

// GetMinTicksOk returns a tuple with the MinTicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChain) GetMinTicksOk() (*MinTicks, bool) {
	if o == nil || IsNil(o.MinTicks) {
		return nil, false
	}
	return o.MinTicks, true
}

// HasMinTicks returns a boolean if a field has been set.
func (o *OptionChain) HasMinTicks() bool {
	if o != nil && !IsNil(o.MinTicks) {
		return true
	}

	return false
}

// SetMinTicks gets a reference to the given MinTicks and assigns it to the MinTicks field.
func (o *OptionChain) SetMinTicks(v MinTicks) {
	o.MinTicks = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OptionChain) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChain) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OptionChain) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *OptionChain) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTradeValueMultiplier returns the TradeValueMultiplier field value if set, zero value otherwise.
func (o *OptionChain) GetTradeValueMultiplier() string {
	if o == nil || IsNil(o.TradeValueMultiplier) {
		var ret string
		return ret
	}
	return *o.TradeValueMultiplier
}

// GetTradeValueMultiplierOk returns a tuple with the TradeValueMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChain) GetTradeValueMultiplierOk() (*string, bool) {
	if o == nil || IsNil(o.TradeValueMultiplier) {
		return nil, false
	}
	return o.TradeValueMultiplier, true
}

// HasTradeValueMultiplier returns a boolean if a field has been set.
func (o *OptionChain) HasTradeValueMultiplier() bool {
	if o != nil && !IsNil(o.TradeValueMultiplier) {
		return true
	}

	return false
}

// SetTradeValueMultiplier gets a reference to the given string and assigns it to the TradeValueMultiplier field.
func (o *OptionChain) SetTradeValueMultiplier(v string) {
	o.TradeValueMultiplier = &v
}

// GetUnderlyingInstruments returns the UnderlyingInstruments field value if set, zero value otherwise.
func (o *OptionChain) GetUnderlyingInstruments() []UnderlyingInstrument {
	if o == nil || IsNil(o.UnderlyingInstruments) {
		var ret []UnderlyingInstrument
		return ret
	}
	return o.UnderlyingInstruments
}

// GetUnderlyingInstrumentsOk returns a tuple with the UnderlyingInstruments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionChain) GetUnderlyingInstrumentsOk() ([]UnderlyingInstrument, bool) {
	if o == nil || IsNil(o.UnderlyingInstruments) {
		return nil, false
	}
	return o.UnderlyingInstruments, true
}

// HasUnderlyingInstruments returns a boolean if a field has been set.
func (o *OptionChain) HasUnderlyingInstruments() bool {
	if o != nil && !IsNil(o.UnderlyingInstruments) {
		return true
	}

	return false
}

// SetUnderlyingInstruments gets a reference to the given []UnderlyingInstrument and assigns it to the UnderlyingInstruments field.
func (o *OptionChain) SetUnderlyingInstruments(v []UnderlyingInstrument) {
	o.UnderlyingInstruments = v
}

func (o OptionChain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptionChain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanOpenPosition) {
		toSerialize["can_open_position"] = o.CanOpenPosition
	}
	if !IsNil(o.CashComponent) {
		toSerialize["cash_component"] = o.CashComponent
	}
	if !IsNil(o.ExpirationDates) {
		toSerialize["expiration_dates"] = o.ExpirationDates
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MinTicks) {
		toSerialize["min_ticks"] = o.MinTicks
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.TradeValueMultiplier) {
		toSerialize["trade_value_multiplier"] = o.TradeValueMultiplier
	}
	if !IsNil(o.UnderlyingInstruments) {
		toSerialize["underlying_instruments"] = o.UnderlyingInstruments
	}
	return toSerialize, nil
}

type NullableOptionChain struct {
	value *OptionChain
	isSet bool
}

func (v NullableOptionChain) Get() *OptionChain {
	return v.value
}

func (v *NullableOptionChain) Set(val *OptionChain) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionChain) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionChain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionChain(val *OptionChain) *NullableOptionChain {
	return &NullableOptionChain{value: val, isSet: true}
}

func (v NullableOptionChain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionChain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


