/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MarketData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketData{}

// MarketData struct for MarketData
type MarketData struct {
	Acronym *string `json:"acronym,omitempty"`
	City *string `json:"city,omitempty"`
	Country *string `json:"country,omitempty"`
	Mic *string `json:"mic,omitempty"`
	Name *string `json:"name,omitempty"`
	OperatingMic *string `json:"operating_mic,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	TodaysHours *string `json:"todays_hours,omitempty"`
	Url *string `json:"url,omitempty"`
	Website *string `json:"website,omitempty"`
}

// NewMarketData instantiates a new MarketData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketData() *MarketData {
	this := MarketData{}
	return &this
}

// NewMarketDataWithDefaults instantiates a new MarketData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketDataWithDefaults() *MarketData {
	this := MarketData{}
	return &this
}

// GetAcronym returns the Acronym field value if set, zero value otherwise.
func (o *MarketData) GetAcronym() string {
	if o == nil || IsNil(o.Acronym) {
		var ret string
		return ret
	}
	return *o.Acronym
}

// GetAcronymOk returns a tuple with the Acronym field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketData) GetAcronymOk() (*string, bool) {
	if o == nil || IsNil(o.Acronym) {
		return nil, false
	}
	return o.Acronym, true
}

// HasAcronym returns a boolean if a field has been set.
func (o *MarketData) HasAcronym() bool {
	if o != nil && !IsNil(o.Acronym) {
		return true
	}

	return false
}

// SetAcronym gets a reference to the given string and assigns it to the Acronym field.
func (o *MarketData) SetAcronym(v string) {
	o.Acronym = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *MarketData) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketData) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *MarketData) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *MarketData) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *MarketData) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketData) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *MarketData) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *MarketData) SetCountry(v string) {
	o.Country = &v
}

// GetMic returns the Mic field value if set, zero value otherwise.
func (o *MarketData) GetMic() string {
	if o == nil || IsNil(o.Mic) {
		var ret string
		return ret
	}
	return *o.Mic
}

// GetMicOk returns a tuple with the Mic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketData) GetMicOk() (*string, bool) {
	if o == nil || IsNil(o.Mic) {
		return nil, false
	}
	return o.Mic, true
}

// HasMic returns a boolean if a field has been set.
func (o *MarketData) HasMic() bool {
	if o != nil && !IsNil(o.Mic) {
		return true
	}

	return false
}

// SetMic gets a reference to the given string and assigns it to the Mic field.
func (o *MarketData) SetMic(v string) {
	o.Mic = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MarketData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MarketData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MarketData) SetName(v string) {
	o.Name = &v
}

// GetOperatingMic returns the OperatingMic field value if set, zero value otherwise.
func (o *MarketData) GetOperatingMic() string {
	if o == nil || IsNil(o.OperatingMic) {
		var ret string
		return ret
	}
	return *o.OperatingMic
}

// GetOperatingMicOk returns a tuple with the OperatingMic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketData) GetOperatingMicOk() (*string, bool) {
	if o == nil || IsNil(o.OperatingMic) {
		return nil, false
	}
	return o.OperatingMic, true
}

// HasOperatingMic returns a boolean if a field has been set.
func (o *MarketData) HasOperatingMic() bool {
	if o != nil && !IsNil(o.OperatingMic) {
		return true
	}

	return false
}

// SetOperatingMic gets a reference to the given string and assigns it to the OperatingMic field.
func (o *MarketData) SetOperatingMic(v string) {
	o.OperatingMic = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *MarketData) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketData) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *MarketData) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *MarketData) SetTimezone(v string) {
	o.Timezone = &v
}

// GetTodaysHours returns the TodaysHours field value if set, zero value otherwise.
func (o *MarketData) GetTodaysHours() string {
	if o == nil || IsNil(o.TodaysHours) {
		var ret string
		return ret
	}
	return *o.TodaysHours
}

// GetTodaysHoursOk returns a tuple with the TodaysHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketData) GetTodaysHoursOk() (*string, bool) {
	if o == nil || IsNil(o.TodaysHours) {
		return nil, false
	}
	return o.TodaysHours, true
}

// HasTodaysHours returns a boolean if a field has been set.
func (o *MarketData) HasTodaysHours() bool {
	if o != nil && !IsNil(o.TodaysHours) {
		return true
	}

	return false
}

// SetTodaysHours gets a reference to the given string and assigns it to the TodaysHours field.
func (o *MarketData) SetTodaysHours(v string) {
	o.TodaysHours = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *MarketData) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketData) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *MarketData) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *MarketData) SetUrl(v string) {
	o.Url = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *MarketData) GetWebsite() string {
	if o == nil || IsNil(o.Website) {
		var ret string
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketData) GetWebsiteOk() (*string, bool) {
	if o == nil || IsNil(o.Website) {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *MarketData) HasWebsite() bool {
	if o != nil && !IsNil(o.Website) {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given string and assigns it to the Website field.
func (o *MarketData) SetWebsite(v string) {
	o.Website = &v
}

func (o MarketData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Acronym) {
		toSerialize["acronym"] = o.Acronym
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Mic) {
		toSerialize["mic"] = o.Mic
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OperatingMic) {
		toSerialize["operating_mic"] = o.OperatingMic
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.TodaysHours) {
		toSerialize["todays_hours"] = o.TodaysHours
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Website) {
		toSerialize["website"] = o.Website
	}
	return toSerialize, nil
}

type NullableMarketData struct {
	value *MarketData
	isSet bool
}

func (v NullableMarketData) Get() *MarketData {
	return v.value
}

func (v *NullableMarketData) Set(val *MarketData) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketData) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketData(val *MarketData) *NullableMarketData {
	return &NullableMarketData{value: val, isSet: true}
}

func (v NullableMarketData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


