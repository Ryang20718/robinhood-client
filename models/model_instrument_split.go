/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InstrumentSplit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstrumentSplit{}

// InstrumentSplit struct for InstrumentSplit
type InstrumentSplit struct {
	Divisor *string `json:"divisor,omitempty"`
	ExecutionDate *string `json:"execution_date,omitempty"`
	Instrument *string `json:"instrument,omitempty"`
	Multiplier *string `json:"multiplier,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewInstrumentSplit instantiates a new InstrumentSplit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstrumentSplit() *InstrumentSplit {
	this := InstrumentSplit{}
	return &this
}

// NewInstrumentSplitWithDefaults instantiates a new InstrumentSplit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstrumentSplitWithDefaults() *InstrumentSplit {
	this := InstrumentSplit{}
	return &this
}

// GetDivisor returns the Divisor field value if set, zero value otherwise.
func (o *InstrumentSplit) GetDivisor() string {
	if o == nil || IsNil(o.Divisor) {
		var ret string
		return ret
	}
	return *o.Divisor
}

// GetDivisorOk returns a tuple with the Divisor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentSplit) GetDivisorOk() (*string, bool) {
	if o == nil || IsNil(o.Divisor) {
		return nil, false
	}
	return o.Divisor, true
}

// HasDivisor returns a boolean if a field has been set.
func (o *InstrumentSplit) HasDivisor() bool {
	if o != nil && !IsNil(o.Divisor) {
		return true
	}

	return false
}

// SetDivisor gets a reference to the given string and assigns it to the Divisor field.
func (o *InstrumentSplit) SetDivisor(v string) {
	o.Divisor = &v
}

// GetExecutionDate returns the ExecutionDate field value if set, zero value otherwise.
func (o *InstrumentSplit) GetExecutionDate() string {
	if o == nil || IsNil(o.ExecutionDate) {
		var ret string
		return ret
	}
	return *o.ExecutionDate
}

// GetExecutionDateOk returns a tuple with the ExecutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentSplit) GetExecutionDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionDate) {
		return nil, false
	}
	return o.ExecutionDate, true
}

// HasExecutionDate returns a boolean if a field has been set.
func (o *InstrumentSplit) HasExecutionDate() bool {
	if o != nil && !IsNil(o.ExecutionDate) {
		return true
	}

	return false
}

// SetExecutionDate gets a reference to the given string and assigns it to the ExecutionDate field.
func (o *InstrumentSplit) SetExecutionDate(v string) {
	o.ExecutionDate = &v
}

// GetInstrument returns the Instrument field value if set, zero value otherwise.
func (o *InstrumentSplit) GetInstrument() string {
	if o == nil || IsNil(o.Instrument) {
		var ret string
		return ret
	}
	return *o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentSplit) GetInstrumentOk() (*string, bool) {
	if o == nil || IsNil(o.Instrument) {
		return nil, false
	}
	return o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *InstrumentSplit) HasInstrument() bool {
	if o != nil && !IsNil(o.Instrument) {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given string and assigns it to the Instrument field.
func (o *InstrumentSplit) SetInstrument(v string) {
	o.Instrument = &v
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise.
func (o *InstrumentSplit) GetMultiplier() string {
	if o == nil || IsNil(o.Multiplier) {
		var ret string
		return ret
	}
	return *o.Multiplier
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentSplit) GetMultiplierOk() (*string, bool) {
	if o == nil || IsNil(o.Multiplier) {
		return nil, false
	}
	return o.Multiplier, true
}

// HasMultiplier returns a boolean if a field has been set.
func (o *InstrumentSplit) HasMultiplier() bool {
	if o != nil && !IsNil(o.Multiplier) {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given string and assigns it to the Multiplier field.
func (o *InstrumentSplit) SetMultiplier(v string) {
	o.Multiplier = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *InstrumentSplit) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentSplit) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *InstrumentSplit) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *InstrumentSplit) SetUrl(v string) {
	o.Url = &v
}

func (o InstrumentSplit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstrumentSplit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Divisor) {
		toSerialize["divisor"] = o.Divisor
	}
	if !IsNil(o.ExecutionDate) {
		toSerialize["execution_date"] = o.ExecutionDate
	}
	if !IsNil(o.Instrument) {
		toSerialize["instrument"] = o.Instrument
	}
	if !IsNil(o.Multiplier) {
		toSerialize["multiplier"] = o.Multiplier
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableInstrumentSplit struct {
	value *InstrumentSplit
	isSet bool
}

func (v NullableInstrumentSplit) Get() *InstrumentSplit {
	return v.value
}

func (v *NullableInstrumentSplit) Set(val *InstrumentSplit) {
	v.value = val
	v.isSet = true
}

func (v NullableInstrumentSplit) IsSet() bool {
	return v.isSet
}

func (v *NullableInstrumentSplit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstrumentSplit(val *InstrumentSplit) *NullableInstrumentSplit {
	return &NullableInstrumentSplit{value: val, isSet: true}
}

func (v NullableInstrumentSplit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstrumentSplit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


