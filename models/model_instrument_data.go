/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InstrumentData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstrumentData{}

// InstrumentData struct for InstrumentData
type InstrumentData struct {
	BloombergUnique *string `json:"bloomberg_unique,omitempty"`
	Country *string `json:"country,omitempty"`
	DayTradeRatio *string `json:"day_trade_ratio,omitempty"`
	Fundamentals *string `json:"fundamentals,omitempty"`
	Id *string `json:"id,omitempty"`
	ListDate *string `json:"list_date,omitempty"`
	MaintenanceRatio *string `json:"maintenance_ratio,omitempty"`
	MarginInitialRatio *string `json:"margin_initial_ratio,omitempty"`
	Market *string `json:"market,omitempty"`
	MinTickSize *string `json:"min_tick_size,omitempty"`
	Name *string `json:"name,omitempty"`
	Quote *string `json:"quote,omitempty"`
	SimpleName *string `json:"simple_name,omitempty"`
	Splits *string `json:"splits,omitempty"`
	State *InstrumentState `json:"state,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	Tradability *string `json:"tradability,omitempty"`
	Tradeable *bool `json:"tradeable,omitempty"`
	Type *string `json:"type,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewInstrumentData instantiates a new InstrumentData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstrumentData() *InstrumentData {
	this := InstrumentData{}
	return &this
}

// NewInstrumentDataWithDefaults instantiates a new InstrumentData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstrumentDataWithDefaults() *InstrumentData {
	this := InstrumentData{}
	return &this
}

// GetBloombergUnique returns the BloombergUnique field value if set, zero value otherwise.
func (o *InstrumentData) GetBloombergUnique() string {
	if o == nil || IsNil(o.BloombergUnique) {
		var ret string
		return ret
	}
	return *o.BloombergUnique
}

// GetBloombergUniqueOk returns a tuple with the BloombergUnique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetBloombergUniqueOk() (*string, bool) {
	if o == nil || IsNil(o.BloombergUnique) {
		return nil, false
	}
	return o.BloombergUnique, true
}

// HasBloombergUnique returns a boolean if a field has been set.
func (o *InstrumentData) HasBloombergUnique() bool {
	if o != nil && !IsNil(o.BloombergUnique) {
		return true
	}

	return false
}

// SetBloombergUnique gets a reference to the given string and assigns it to the BloombergUnique field.
func (o *InstrumentData) SetBloombergUnique(v string) {
	o.BloombergUnique = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *InstrumentData) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *InstrumentData) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *InstrumentData) SetCountry(v string) {
	o.Country = &v
}

// GetDayTradeRatio returns the DayTradeRatio field value if set, zero value otherwise.
func (o *InstrumentData) GetDayTradeRatio() string {
	if o == nil || IsNil(o.DayTradeRatio) {
		var ret string
		return ret
	}
	return *o.DayTradeRatio
}

// GetDayTradeRatioOk returns a tuple with the DayTradeRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetDayTradeRatioOk() (*string, bool) {
	if o == nil || IsNil(o.DayTradeRatio) {
		return nil, false
	}
	return o.DayTradeRatio, true
}

// HasDayTradeRatio returns a boolean if a field has been set.
func (o *InstrumentData) HasDayTradeRatio() bool {
	if o != nil && !IsNil(o.DayTradeRatio) {
		return true
	}

	return false
}

// SetDayTradeRatio gets a reference to the given string and assigns it to the DayTradeRatio field.
func (o *InstrumentData) SetDayTradeRatio(v string) {
	o.DayTradeRatio = &v
}

// GetFundamentals returns the Fundamentals field value if set, zero value otherwise.
func (o *InstrumentData) GetFundamentals() string {
	if o == nil || IsNil(o.Fundamentals) {
		var ret string
		return ret
	}
	return *o.Fundamentals
}

// GetFundamentalsOk returns a tuple with the Fundamentals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetFundamentalsOk() (*string, bool) {
	if o == nil || IsNil(o.Fundamentals) {
		return nil, false
	}
	return o.Fundamentals, true
}

// HasFundamentals returns a boolean if a field has been set.
func (o *InstrumentData) HasFundamentals() bool {
	if o != nil && !IsNil(o.Fundamentals) {
		return true
	}

	return false
}

// SetFundamentals gets a reference to the given string and assigns it to the Fundamentals field.
func (o *InstrumentData) SetFundamentals(v string) {
	o.Fundamentals = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstrumentData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InstrumentData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InstrumentData) SetId(v string) {
	o.Id = &v
}

// GetListDate returns the ListDate field value if set, zero value otherwise.
func (o *InstrumentData) GetListDate() string {
	if o == nil || IsNil(o.ListDate) {
		var ret string
		return ret
	}
	return *o.ListDate
}

// GetListDateOk returns a tuple with the ListDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetListDateOk() (*string, bool) {
	if o == nil || IsNil(o.ListDate) {
		return nil, false
	}
	return o.ListDate, true
}

// HasListDate returns a boolean if a field has been set.
func (o *InstrumentData) HasListDate() bool {
	if o != nil && !IsNil(o.ListDate) {
		return true
	}

	return false
}

// SetListDate gets a reference to the given string and assigns it to the ListDate field.
func (o *InstrumentData) SetListDate(v string) {
	o.ListDate = &v
}

// GetMaintenanceRatio returns the MaintenanceRatio field value if set, zero value otherwise.
func (o *InstrumentData) GetMaintenanceRatio() string {
	if o == nil || IsNil(o.MaintenanceRatio) {
		var ret string
		return ret
	}
	return *o.MaintenanceRatio
}

// GetMaintenanceRatioOk returns a tuple with the MaintenanceRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetMaintenanceRatioOk() (*string, bool) {
	if o == nil || IsNil(o.MaintenanceRatio) {
		return nil, false
	}
	return o.MaintenanceRatio, true
}

// HasMaintenanceRatio returns a boolean if a field has been set.
func (o *InstrumentData) HasMaintenanceRatio() bool {
	if o != nil && !IsNil(o.MaintenanceRatio) {
		return true
	}

	return false
}

// SetMaintenanceRatio gets a reference to the given string and assigns it to the MaintenanceRatio field.
func (o *InstrumentData) SetMaintenanceRatio(v string) {
	o.MaintenanceRatio = &v
}

// GetMarginInitialRatio returns the MarginInitialRatio field value if set, zero value otherwise.
func (o *InstrumentData) GetMarginInitialRatio() string {
	if o == nil || IsNil(o.MarginInitialRatio) {
		var ret string
		return ret
	}
	return *o.MarginInitialRatio
}

// GetMarginInitialRatioOk returns a tuple with the MarginInitialRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetMarginInitialRatioOk() (*string, bool) {
	if o == nil || IsNil(o.MarginInitialRatio) {
		return nil, false
	}
	return o.MarginInitialRatio, true
}

// HasMarginInitialRatio returns a boolean if a field has been set.
func (o *InstrumentData) HasMarginInitialRatio() bool {
	if o != nil && !IsNil(o.MarginInitialRatio) {
		return true
	}

	return false
}

// SetMarginInitialRatio gets a reference to the given string and assigns it to the MarginInitialRatio field.
func (o *InstrumentData) SetMarginInitialRatio(v string) {
	o.MarginInitialRatio = &v
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *InstrumentData) GetMarket() string {
	if o == nil || IsNil(o.Market) {
		var ret string
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetMarketOk() (*string, bool) {
	if o == nil || IsNil(o.Market) {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *InstrumentData) HasMarket() bool {
	if o != nil && !IsNil(o.Market) {
		return true
	}

	return false
}

// SetMarket gets a reference to the given string and assigns it to the Market field.
func (o *InstrumentData) SetMarket(v string) {
	o.Market = &v
}

// GetMinTickSize returns the MinTickSize field value if set, zero value otherwise.
func (o *InstrumentData) GetMinTickSize() string {
	if o == nil || IsNil(o.MinTickSize) {
		var ret string
		return ret
	}
	return *o.MinTickSize
}

// GetMinTickSizeOk returns a tuple with the MinTickSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetMinTickSizeOk() (*string, bool) {
	if o == nil || IsNil(o.MinTickSize) {
		return nil, false
	}
	return o.MinTickSize, true
}

// HasMinTickSize returns a boolean if a field has been set.
func (o *InstrumentData) HasMinTickSize() bool {
	if o != nil && !IsNil(o.MinTickSize) {
		return true
	}

	return false
}

// SetMinTickSize gets a reference to the given string and assigns it to the MinTickSize field.
func (o *InstrumentData) SetMinTickSize(v string) {
	o.MinTickSize = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InstrumentData) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InstrumentData) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InstrumentData) SetName(v string) {
	o.Name = &v
}

// GetQuote returns the Quote field value if set, zero value otherwise.
func (o *InstrumentData) GetQuote() string {
	if o == nil || IsNil(o.Quote) {
		var ret string
		return ret
	}
	return *o.Quote
}

// GetQuoteOk returns a tuple with the Quote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetQuoteOk() (*string, bool) {
	if o == nil || IsNil(o.Quote) {
		return nil, false
	}
	return o.Quote, true
}

// HasQuote returns a boolean if a field has been set.
func (o *InstrumentData) HasQuote() bool {
	if o != nil && !IsNil(o.Quote) {
		return true
	}

	return false
}

// SetQuote gets a reference to the given string and assigns it to the Quote field.
func (o *InstrumentData) SetQuote(v string) {
	o.Quote = &v
}

// GetSimpleName returns the SimpleName field value if set, zero value otherwise.
func (o *InstrumentData) GetSimpleName() string {
	if o == nil || IsNil(o.SimpleName) {
		var ret string
		return ret
	}
	return *o.SimpleName
}

// GetSimpleNameOk returns a tuple with the SimpleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetSimpleNameOk() (*string, bool) {
	if o == nil || IsNil(o.SimpleName) {
		return nil, false
	}
	return o.SimpleName, true
}

// HasSimpleName returns a boolean if a field has been set.
func (o *InstrumentData) HasSimpleName() bool {
	if o != nil && !IsNil(o.SimpleName) {
		return true
	}

	return false
}

// SetSimpleName gets a reference to the given string and assigns it to the SimpleName field.
func (o *InstrumentData) SetSimpleName(v string) {
	o.SimpleName = &v
}

// GetSplits returns the Splits field value if set, zero value otherwise.
func (o *InstrumentData) GetSplits() string {
	if o == nil || IsNil(o.Splits) {
		var ret string
		return ret
	}
	return *o.Splits
}

// GetSplitsOk returns a tuple with the Splits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetSplitsOk() (*string, bool) {
	if o == nil || IsNil(o.Splits) {
		return nil, false
	}
	return o.Splits, true
}

// HasSplits returns a boolean if a field has been set.
func (o *InstrumentData) HasSplits() bool {
	if o != nil && !IsNil(o.Splits) {
		return true
	}

	return false
}

// SetSplits gets a reference to the given string and assigns it to the Splits field.
func (o *InstrumentData) SetSplits(v string) {
	o.Splits = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *InstrumentData) GetState() InstrumentState {
	if o == nil || IsNil(o.State) {
		var ret InstrumentState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetStateOk() (*InstrumentState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *InstrumentData) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given InstrumentState and assigns it to the State field.
func (o *InstrumentData) SetState(v InstrumentState) {
	o.State = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *InstrumentData) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *InstrumentData) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *InstrumentData) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTradability returns the Tradability field value if set, zero value otherwise.
func (o *InstrumentData) GetTradability() string {
	if o == nil || IsNil(o.Tradability) {
		var ret string
		return ret
	}
	return *o.Tradability
}

// GetTradabilityOk returns a tuple with the Tradability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetTradabilityOk() (*string, bool) {
	if o == nil || IsNil(o.Tradability) {
		return nil, false
	}
	return o.Tradability, true
}

// HasTradability returns a boolean if a field has been set.
func (o *InstrumentData) HasTradability() bool {
	if o != nil && !IsNil(o.Tradability) {
		return true
	}

	return false
}

// SetTradability gets a reference to the given string and assigns it to the Tradability field.
func (o *InstrumentData) SetTradability(v string) {
	o.Tradability = &v
}

// GetTradeable returns the Tradeable field value if set, zero value otherwise.
func (o *InstrumentData) GetTradeable() bool {
	if o == nil || IsNil(o.Tradeable) {
		var ret bool
		return ret
	}
	return *o.Tradeable
}

// GetTradeableOk returns a tuple with the Tradeable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetTradeableOk() (*bool, bool) {
	if o == nil || IsNil(o.Tradeable) {
		return nil, false
	}
	return o.Tradeable, true
}

// HasTradeable returns a boolean if a field has been set.
func (o *InstrumentData) HasTradeable() bool {
	if o != nil && !IsNil(o.Tradeable) {
		return true
	}

	return false
}

// SetTradeable gets a reference to the given bool and assigns it to the Tradeable field.
func (o *InstrumentData) SetTradeable(v bool) {
	o.Tradeable = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InstrumentData) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InstrumentData) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InstrumentData) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *InstrumentData) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstrumentData) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *InstrumentData) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *InstrumentData) SetUrl(v string) {
	o.Url = &v
}

func (o InstrumentData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstrumentData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BloombergUnique) {
		toSerialize["bloomberg_unique"] = o.BloombergUnique
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.DayTradeRatio) {
		toSerialize["day_trade_ratio"] = o.DayTradeRatio
	}
	if !IsNil(o.Fundamentals) {
		toSerialize["fundamentals"] = o.Fundamentals
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ListDate) {
		toSerialize["list_date"] = o.ListDate
	}
	if !IsNil(o.MaintenanceRatio) {
		toSerialize["maintenance_ratio"] = o.MaintenanceRatio
	}
	if !IsNil(o.MarginInitialRatio) {
		toSerialize["margin_initial_ratio"] = o.MarginInitialRatio
	}
	if !IsNil(o.Market) {
		toSerialize["market"] = o.Market
	}
	if !IsNil(o.MinTickSize) {
		toSerialize["min_tick_size"] = o.MinTickSize
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Quote) {
		toSerialize["quote"] = o.Quote
	}
	if !IsNil(o.SimpleName) {
		toSerialize["simple_name"] = o.SimpleName
	}
	if !IsNil(o.Splits) {
		toSerialize["splits"] = o.Splits
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Tradability) {
		toSerialize["tradability"] = o.Tradability
	}
	if !IsNil(o.Tradeable) {
		toSerialize["tradeable"] = o.Tradeable
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableInstrumentData struct {
	value *InstrumentData
	isSet bool
}

func (v NullableInstrumentData) Get() *InstrumentData {
	return v.value
}

func (v *NullableInstrumentData) Set(val *InstrumentData) {
	v.value = val
	v.isSet = true
}

func (v NullableInstrumentData) IsSet() bool {
	return v.isSet
}

func (v *NullableInstrumentData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstrumentData(val *InstrumentData) *NullableInstrumentData {
	return &NullableInstrumentData{value: val, isSet: true}
}

func (v NullableInstrumentData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstrumentData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


