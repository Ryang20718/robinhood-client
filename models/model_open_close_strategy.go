/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OpenCloseStrategy the model 'OpenCloseStrategy'
type OpenCloseStrategy string

// List of OpenCloseStrategy
const (
	LONG_CALL OpenCloseStrategy = "long_call"
	LONG_PUT OpenCloseStrategy = "long_put"
	LONG_CALL_SPREAD OpenCloseStrategy = "long_call_spread"
	LONG_PUT_SPREAD OpenCloseStrategy = "long_put_spread"
	SHORT_PUT_SPREAD OpenCloseStrategy = "short_put_spread"
	SHORT_CALL_SPREAD OpenCloseStrategy = "short_call_spread"
	SHORT_PUT_LADDER OpenCloseStrategy = "short_put_ladder"
	SHORT_CALL_LADDER OpenCloseStrategy = "short_call_ladder"
)

// All allowed values of OpenCloseStrategy enum
var AllowedOpenCloseStrategyEnumValues = []OpenCloseStrategy{
	"long_call",
	"long_put",
	"long_call_spread",
	"long_put_spread",
	"short_put_spread",
	"short_call_spread",
	"short_put_ladder",
	"short_call_ladder",
}

func (v *OpenCloseStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpenCloseStrategy(value)
	for _, existing := range AllowedOpenCloseStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpenCloseStrategy", value)
}

// NewOpenCloseStrategyFromValue returns a pointer to a valid OpenCloseStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpenCloseStrategyFromValue(v string) (*OpenCloseStrategy, error) {
	ev := OpenCloseStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpenCloseStrategy: valid values are %v", v, AllowedOpenCloseStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpenCloseStrategy) IsValid() bool {
	for _, existing := range AllowedOpenCloseStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpenCloseStrategy value
func (v OpenCloseStrategy) Ptr() *OpenCloseStrategy {
	return &v
}

type NullableOpenCloseStrategy struct {
	value *OpenCloseStrategy
	isSet bool
}

func (v NullableOpenCloseStrategy) Get() *OpenCloseStrategy {
	return v.value
}

func (v *NullableOpenCloseStrategy) Set(val *OpenCloseStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenCloseStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenCloseStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenCloseStrategy(val *OpenCloseStrategy) *NullableOpenCloseStrategy {
	return &NullableOpenCloseStrategy{value: val, isSet: true}
}

func (v NullableOpenCloseStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenCloseStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

