/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OptionsMarketData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptionsMarketData{}

// OptionsMarketData struct for OptionsMarketData
type OptionsMarketData struct {
	AdjustedMarkPrice *string `json:"adjusted_mark_price,omitempty"`
	AskPrice *string `json:"ask_price,omitempty"`
	AskSize *string `json:"ask_size,omitempty"`
	BidPrice *string `json:"bid_price,omitempty"`
	BidSize *string `json:"bid_size,omitempty"`
	BreakEvenPrice *string `json:"break_even_price,omitempty"`
	ChanceOfProfitLong *string `json:"chance_of_profit_long,omitempty"`
	ChanceOfProfitShort *string `json:"chance_of_profit_short,omitempty"`
	Delta *string `json:"delta,omitempty"`
	Gamma *string `json:"gamma,omitempty"`
	HighPrice *string `json:"high_price,omitempty"`
	ImpliedVolatility *string `json:"implied_volatility,omitempty"`
	Instrument *string `json:"instrument,omitempty"`
	LastTradePrice *string `json:"last_trade_price,omitempty"`
	LastTradeSize *string `json:"last_trade_size,omitempty"`
	LowPrice *string `json:"low_price,omitempty"`
	MarkPrice *string `json:"mark_price,omitempty"`
	OpenInterest *string `json:"open_interest,omitempty"`
	PreviousCloseDate *string `json:"previous_close_date,omitempty"`
	PreviousClosePrice *string `json:"previous_close_price,omitempty"`
	Rho *string `json:"rho,omitempty"`
	Theta *string `json:"theta,omitempty"`
	Vega *string `json:"vega,omitempty"`
	Volume *string `json:"volume,omitempty"`
}

// NewOptionsMarketData instantiates a new OptionsMarketData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionsMarketData() *OptionsMarketData {
	this := OptionsMarketData{}
	return &this
}

// NewOptionsMarketDataWithDefaults instantiates a new OptionsMarketData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionsMarketDataWithDefaults() *OptionsMarketData {
	this := OptionsMarketData{}
	return &this
}

// GetAdjustedMarkPrice returns the AdjustedMarkPrice field value if set, zero value otherwise.
func (o *OptionsMarketData) GetAdjustedMarkPrice() string {
	if o == nil || IsNil(o.AdjustedMarkPrice) {
		var ret string
		return ret
	}
	return *o.AdjustedMarkPrice
}

// GetAdjustedMarkPriceOk returns a tuple with the AdjustedMarkPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetAdjustedMarkPriceOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustedMarkPrice) {
		return nil, false
	}
	return o.AdjustedMarkPrice, true
}

// HasAdjustedMarkPrice returns a boolean if a field has been set.
func (o *OptionsMarketData) HasAdjustedMarkPrice() bool {
	if o != nil && !IsNil(o.AdjustedMarkPrice) {
		return true
	}

	return false
}

// SetAdjustedMarkPrice gets a reference to the given string and assigns it to the AdjustedMarkPrice field.
func (o *OptionsMarketData) SetAdjustedMarkPrice(v string) {
	o.AdjustedMarkPrice = &v
}

// GetAskPrice returns the AskPrice field value if set, zero value otherwise.
func (o *OptionsMarketData) GetAskPrice() string {
	if o == nil || IsNil(o.AskPrice) {
		var ret string
		return ret
	}
	return *o.AskPrice
}

// GetAskPriceOk returns a tuple with the AskPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetAskPriceOk() (*string, bool) {
	if o == nil || IsNil(o.AskPrice) {
		return nil, false
	}
	return o.AskPrice, true
}

// HasAskPrice returns a boolean if a field has been set.
func (o *OptionsMarketData) HasAskPrice() bool {
	if o != nil && !IsNil(o.AskPrice) {
		return true
	}

	return false
}

// SetAskPrice gets a reference to the given string and assigns it to the AskPrice field.
func (o *OptionsMarketData) SetAskPrice(v string) {
	o.AskPrice = &v
}

// GetAskSize returns the AskSize field value if set, zero value otherwise.
func (o *OptionsMarketData) GetAskSize() string {
	if o == nil || IsNil(o.AskSize) {
		var ret string
		return ret
	}
	return *o.AskSize
}

// GetAskSizeOk returns a tuple with the AskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetAskSizeOk() (*string, bool) {
	if o == nil || IsNil(o.AskSize) {
		return nil, false
	}
	return o.AskSize, true
}

// HasAskSize returns a boolean if a field has been set.
func (o *OptionsMarketData) HasAskSize() bool {
	if o != nil && !IsNil(o.AskSize) {
		return true
	}

	return false
}

// SetAskSize gets a reference to the given string and assigns it to the AskSize field.
func (o *OptionsMarketData) SetAskSize(v string) {
	o.AskSize = &v
}

// GetBidPrice returns the BidPrice field value if set, zero value otherwise.
func (o *OptionsMarketData) GetBidPrice() string {
	if o == nil || IsNil(o.BidPrice) {
		var ret string
		return ret
	}
	return *o.BidPrice
}

// GetBidPriceOk returns a tuple with the BidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetBidPriceOk() (*string, bool) {
	if o == nil || IsNil(o.BidPrice) {
		return nil, false
	}
	return o.BidPrice, true
}

// HasBidPrice returns a boolean if a field has been set.
func (o *OptionsMarketData) HasBidPrice() bool {
	if o != nil && !IsNil(o.BidPrice) {
		return true
	}

	return false
}

// SetBidPrice gets a reference to the given string and assigns it to the BidPrice field.
func (o *OptionsMarketData) SetBidPrice(v string) {
	o.BidPrice = &v
}

// GetBidSize returns the BidSize field value if set, zero value otherwise.
func (o *OptionsMarketData) GetBidSize() string {
	if o == nil || IsNil(o.BidSize) {
		var ret string
		return ret
	}
	return *o.BidSize
}

// GetBidSizeOk returns a tuple with the BidSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetBidSizeOk() (*string, bool) {
	if o == nil || IsNil(o.BidSize) {
		return nil, false
	}
	return o.BidSize, true
}

// HasBidSize returns a boolean if a field has been set.
func (o *OptionsMarketData) HasBidSize() bool {
	if o != nil && !IsNil(o.BidSize) {
		return true
	}

	return false
}

// SetBidSize gets a reference to the given string and assigns it to the BidSize field.
func (o *OptionsMarketData) SetBidSize(v string) {
	o.BidSize = &v
}

// GetBreakEvenPrice returns the BreakEvenPrice field value if set, zero value otherwise.
func (o *OptionsMarketData) GetBreakEvenPrice() string {
	if o == nil || IsNil(o.BreakEvenPrice) {
		var ret string
		return ret
	}
	return *o.BreakEvenPrice
}

// GetBreakEvenPriceOk returns a tuple with the BreakEvenPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetBreakEvenPriceOk() (*string, bool) {
	if o == nil || IsNil(o.BreakEvenPrice) {
		return nil, false
	}
	return o.BreakEvenPrice, true
}

// HasBreakEvenPrice returns a boolean if a field has been set.
func (o *OptionsMarketData) HasBreakEvenPrice() bool {
	if o != nil && !IsNil(o.BreakEvenPrice) {
		return true
	}

	return false
}

// SetBreakEvenPrice gets a reference to the given string and assigns it to the BreakEvenPrice field.
func (o *OptionsMarketData) SetBreakEvenPrice(v string) {
	o.BreakEvenPrice = &v
}

// GetChanceOfProfitLong returns the ChanceOfProfitLong field value if set, zero value otherwise.
func (o *OptionsMarketData) GetChanceOfProfitLong() string {
	if o == nil || IsNil(o.ChanceOfProfitLong) {
		var ret string
		return ret
	}
	return *o.ChanceOfProfitLong
}

// GetChanceOfProfitLongOk returns a tuple with the ChanceOfProfitLong field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetChanceOfProfitLongOk() (*string, bool) {
	if o == nil || IsNil(o.ChanceOfProfitLong) {
		return nil, false
	}
	return o.ChanceOfProfitLong, true
}

// HasChanceOfProfitLong returns a boolean if a field has been set.
func (o *OptionsMarketData) HasChanceOfProfitLong() bool {
	if o != nil && !IsNil(o.ChanceOfProfitLong) {
		return true
	}

	return false
}

// SetChanceOfProfitLong gets a reference to the given string and assigns it to the ChanceOfProfitLong field.
func (o *OptionsMarketData) SetChanceOfProfitLong(v string) {
	o.ChanceOfProfitLong = &v
}

// GetChanceOfProfitShort returns the ChanceOfProfitShort field value if set, zero value otherwise.
func (o *OptionsMarketData) GetChanceOfProfitShort() string {
	if o == nil || IsNil(o.ChanceOfProfitShort) {
		var ret string
		return ret
	}
	return *o.ChanceOfProfitShort
}

// GetChanceOfProfitShortOk returns a tuple with the ChanceOfProfitShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetChanceOfProfitShortOk() (*string, bool) {
	if o == nil || IsNil(o.ChanceOfProfitShort) {
		return nil, false
	}
	return o.ChanceOfProfitShort, true
}

// HasChanceOfProfitShort returns a boolean if a field has been set.
func (o *OptionsMarketData) HasChanceOfProfitShort() bool {
	if o != nil && !IsNil(o.ChanceOfProfitShort) {
		return true
	}

	return false
}

// SetChanceOfProfitShort gets a reference to the given string and assigns it to the ChanceOfProfitShort field.
func (o *OptionsMarketData) SetChanceOfProfitShort(v string) {
	o.ChanceOfProfitShort = &v
}

// GetDelta returns the Delta field value if set, zero value otherwise.
func (o *OptionsMarketData) GetDelta() string {
	if o == nil || IsNil(o.Delta) {
		var ret string
		return ret
	}
	return *o.Delta
}

// GetDeltaOk returns a tuple with the Delta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetDeltaOk() (*string, bool) {
	if o == nil || IsNil(o.Delta) {
		return nil, false
	}
	return o.Delta, true
}

// HasDelta returns a boolean if a field has been set.
func (o *OptionsMarketData) HasDelta() bool {
	if o != nil && !IsNil(o.Delta) {
		return true
	}

	return false
}

// SetDelta gets a reference to the given string and assigns it to the Delta field.
func (o *OptionsMarketData) SetDelta(v string) {
	o.Delta = &v
}

// GetGamma returns the Gamma field value if set, zero value otherwise.
func (o *OptionsMarketData) GetGamma() string {
	if o == nil || IsNil(o.Gamma) {
		var ret string
		return ret
	}
	return *o.Gamma
}

// GetGammaOk returns a tuple with the Gamma field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetGammaOk() (*string, bool) {
	if o == nil || IsNil(o.Gamma) {
		return nil, false
	}
	return o.Gamma, true
}

// HasGamma returns a boolean if a field has been set.
func (o *OptionsMarketData) HasGamma() bool {
	if o != nil && !IsNil(o.Gamma) {
		return true
	}

	return false
}

// SetGamma gets a reference to the given string and assigns it to the Gamma field.
func (o *OptionsMarketData) SetGamma(v string) {
	o.Gamma = &v
}

// GetHighPrice returns the HighPrice field value if set, zero value otherwise.
func (o *OptionsMarketData) GetHighPrice() string {
	if o == nil || IsNil(o.HighPrice) {
		var ret string
		return ret
	}
	return *o.HighPrice
}

// GetHighPriceOk returns a tuple with the HighPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetHighPriceOk() (*string, bool) {
	if o == nil || IsNil(o.HighPrice) {
		return nil, false
	}
	return o.HighPrice, true
}

// HasHighPrice returns a boolean if a field has been set.
func (o *OptionsMarketData) HasHighPrice() bool {
	if o != nil && !IsNil(o.HighPrice) {
		return true
	}

	return false
}

// SetHighPrice gets a reference to the given string and assigns it to the HighPrice field.
func (o *OptionsMarketData) SetHighPrice(v string) {
	o.HighPrice = &v
}

// GetImpliedVolatility returns the ImpliedVolatility field value if set, zero value otherwise.
func (o *OptionsMarketData) GetImpliedVolatility() string {
	if o == nil || IsNil(o.ImpliedVolatility) {
		var ret string
		return ret
	}
	return *o.ImpliedVolatility
}

// GetImpliedVolatilityOk returns a tuple with the ImpliedVolatility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetImpliedVolatilityOk() (*string, bool) {
	if o == nil || IsNil(o.ImpliedVolatility) {
		return nil, false
	}
	return o.ImpliedVolatility, true
}

// HasImpliedVolatility returns a boolean if a field has been set.
func (o *OptionsMarketData) HasImpliedVolatility() bool {
	if o != nil && !IsNil(o.ImpliedVolatility) {
		return true
	}

	return false
}

// SetImpliedVolatility gets a reference to the given string and assigns it to the ImpliedVolatility field.
func (o *OptionsMarketData) SetImpliedVolatility(v string) {
	o.ImpliedVolatility = &v
}

// GetInstrument returns the Instrument field value if set, zero value otherwise.
func (o *OptionsMarketData) GetInstrument() string {
	if o == nil || IsNil(o.Instrument) {
		var ret string
		return ret
	}
	return *o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetInstrumentOk() (*string, bool) {
	if o == nil || IsNil(o.Instrument) {
		return nil, false
	}
	return o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *OptionsMarketData) HasInstrument() bool {
	if o != nil && !IsNil(o.Instrument) {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given string and assigns it to the Instrument field.
func (o *OptionsMarketData) SetInstrument(v string) {
	o.Instrument = &v
}

// GetLastTradePrice returns the LastTradePrice field value if set, zero value otherwise.
func (o *OptionsMarketData) GetLastTradePrice() string {
	if o == nil || IsNil(o.LastTradePrice) {
		var ret string
		return ret
	}
	return *o.LastTradePrice
}

// GetLastTradePriceOk returns a tuple with the LastTradePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetLastTradePriceOk() (*string, bool) {
	if o == nil || IsNil(o.LastTradePrice) {
		return nil, false
	}
	return o.LastTradePrice, true
}

// HasLastTradePrice returns a boolean if a field has been set.
func (o *OptionsMarketData) HasLastTradePrice() bool {
	if o != nil && !IsNil(o.LastTradePrice) {
		return true
	}

	return false
}

// SetLastTradePrice gets a reference to the given string and assigns it to the LastTradePrice field.
func (o *OptionsMarketData) SetLastTradePrice(v string) {
	o.LastTradePrice = &v
}

// GetLastTradeSize returns the LastTradeSize field value if set, zero value otherwise.
func (o *OptionsMarketData) GetLastTradeSize() string {
	if o == nil || IsNil(o.LastTradeSize) {
		var ret string
		return ret
	}
	return *o.LastTradeSize
}

// GetLastTradeSizeOk returns a tuple with the LastTradeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetLastTradeSizeOk() (*string, bool) {
	if o == nil || IsNil(o.LastTradeSize) {
		return nil, false
	}
	return o.LastTradeSize, true
}

// HasLastTradeSize returns a boolean if a field has been set.
func (o *OptionsMarketData) HasLastTradeSize() bool {
	if o != nil && !IsNil(o.LastTradeSize) {
		return true
	}

	return false
}

// SetLastTradeSize gets a reference to the given string and assigns it to the LastTradeSize field.
func (o *OptionsMarketData) SetLastTradeSize(v string) {
	o.LastTradeSize = &v
}

// GetLowPrice returns the LowPrice field value if set, zero value otherwise.
func (o *OptionsMarketData) GetLowPrice() string {
	if o == nil || IsNil(o.LowPrice) {
		var ret string
		return ret
	}
	return *o.LowPrice
}

// GetLowPriceOk returns a tuple with the LowPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetLowPriceOk() (*string, bool) {
	if o == nil || IsNil(o.LowPrice) {
		return nil, false
	}
	return o.LowPrice, true
}

// HasLowPrice returns a boolean if a field has been set.
func (o *OptionsMarketData) HasLowPrice() bool {
	if o != nil && !IsNil(o.LowPrice) {
		return true
	}

	return false
}

// SetLowPrice gets a reference to the given string and assigns it to the LowPrice field.
func (o *OptionsMarketData) SetLowPrice(v string) {
	o.LowPrice = &v
}

// GetMarkPrice returns the MarkPrice field value if set, zero value otherwise.
func (o *OptionsMarketData) GetMarkPrice() string {
	if o == nil || IsNil(o.MarkPrice) {
		var ret string
		return ret
	}
	return *o.MarkPrice
}

// GetMarkPriceOk returns a tuple with the MarkPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetMarkPriceOk() (*string, bool) {
	if o == nil || IsNil(o.MarkPrice) {
		return nil, false
	}
	return o.MarkPrice, true
}

// HasMarkPrice returns a boolean if a field has been set.
func (o *OptionsMarketData) HasMarkPrice() bool {
	if o != nil && !IsNil(o.MarkPrice) {
		return true
	}

	return false
}

// SetMarkPrice gets a reference to the given string and assigns it to the MarkPrice field.
func (o *OptionsMarketData) SetMarkPrice(v string) {
	o.MarkPrice = &v
}

// GetOpenInterest returns the OpenInterest field value if set, zero value otherwise.
func (o *OptionsMarketData) GetOpenInterest() string {
	if o == nil || IsNil(o.OpenInterest) {
		var ret string
		return ret
	}
	return *o.OpenInterest
}

// GetOpenInterestOk returns a tuple with the OpenInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetOpenInterestOk() (*string, bool) {
	if o == nil || IsNil(o.OpenInterest) {
		return nil, false
	}
	return o.OpenInterest, true
}

// HasOpenInterest returns a boolean if a field has been set.
func (o *OptionsMarketData) HasOpenInterest() bool {
	if o != nil && !IsNil(o.OpenInterest) {
		return true
	}

	return false
}

// SetOpenInterest gets a reference to the given string and assigns it to the OpenInterest field.
func (o *OptionsMarketData) SetOpenInterest(v string) {
	o.OpenInterest = &v
}

// GetPreviousCloseDate returns the PreviousCloseDate field value if set, zero value otherwise.
func (o *OptionsMarketData) GetPreviousCloseDate() string {
	if o == nil || IsNil(o.PreviousCloseDate) {
		var ret string
		return ret
	}
	return *o.PreviousCloseDate
}

// GetPreviousCloseDateOk returns a tuple with the PreviousCloseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetPreviousCloseDateOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousCloseDate) {
		return nil, false
	}
	return o.PreviousCloseDate, true
}

// HasPreviousCloseDate returns a boolean if a field has been set.
func (o *OptionsMarketData) HasPreviousCloseDate() bool {
	if o != nil && !IsNil(o.PreviousCloseDate) {
		return true
	}

	return false
}

// SetPreviousCloseDate gets a reference to the given string and assigns it to the PreviousCloseDate field.
func (o *OptionsMarketData) SetPreviousCloseDate(v string) {
	o.PreviousCloseDate = &v
}

// GetPreviousClosePrice returns the PreviousClosePrice field value if set, zero value otherwise.
func (o *OptionsMarketData) GetPreviousClosePrice() string {
	if o == nil || IsNil(o.PreviousClosePrice) {
		var ret string
		return ret
	}
	return *o.PreviousClosePrice
}

// GetPreviousClosePriceOk returns a tuple with the PreviousClosePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetPreviousClosePriceOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousClosePrice) {
		return nil, false
	}
	return o.PreviousClosePrice, true
}

// HasPreviousClosePrice returns a boolean if a field has been set.
func (o *OptionsMarketData) HasPreviousClosePrice() bool {
	if o != nil && !IsNil(o.PreviousClosePrice) {
		return true
	}

	return false
}

// SetPreviousClosePrice gets a reference to the given string and assigns it to the PreviousClosePrice field.
func (o *OptionsMarketData) SetPreviousClosePrice(v string) {
	o.PreviousClosePrice = &v
}

// GetRho returns the Rho field value if set, zero value otherwise.
func (o *OptionsMarketData) GetRho() string {
	if o == nil || IsNil(o.Rho) {
		var ret string
		return ret
	}
	return *o.Rho
}

// GetRhoOk returns a tuple with the Rho field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetRhoOk() (*string, bool) {
	if o == nil || IsNil(o.Rho) {
		return nil, false
	}
	return o.Rho, true
}

// HasRho returns a boolean if a field has been set.
func (o *OptionsMarketData) HasRho() bool {
	if o != nil && !IsNil(o.Rho) {
		return true
	}

	return false
}

// SetRho gets a reference to the given string and assigns it to the Rho field.
func (o *OptionsMarketData) SetRho(v string) {
	o.Rho = &v
}

// GetTheta returns the Theta field value if set, zero value otherwise.
func (o *OptionsMarketData) GetTheta() string {
	if o == nil || IsNil(o.Theta) {
		var ret string
		return ret
	}
	return *o.Theta
}

// GetThetaOk returns a tuple with the Theta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetThetaOk() (*string, bool) {
	if o == nil || IsNil(o.Theta) {
		return nil, false
	}
	return o.Theta, true
}

// HasTheta returns a boolean if a field has been set.
func (o *OptionsMarketData) HasTheta() bool {
	if o != nil && !IsNil(o.Theta) {
		return true
	}

	return false
}

// SetTheta gets a reference to the given string and assigns it to the Theta field.
func (o *OptionsMarketData) SetTheta(v string) {
	o.Theta = &v
}

// GetVega returns the Vega field value if set, zero value otherwise.
func (o *OptionsMarketData) GetVega() string {
	if o == nil || IsNil(o.Vega) {
		var ret string
		return ret
	}
	return *o.Vega
}

// GetVegaOk returns a tuple with the Vega field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetVegaOk() (*string, bool) {
	if o == nil || IsNil(o.Vega) {
		return nil, false
	}
	return o.Vega, true
}

// HasVega returns a boolean if a field has been set.
func (o *OptionsMarketData) HasVega() bool {
	if o != nil && !IsNil(o.Vega) {
		return true
	}

	return false
}

// SetVega gets a reference to the given string and assigns it to the Vega field.
func (o *OptionsMarketData) SetVega(v string) {
	o.Vega = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *OptionsMarketData) GetVolume() string {
	if o == nil || IsNil(o.Volume) {
		var ret string
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsMarketData) GetVolumeOk() (*string, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *OptionsMarketData) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given string and assigns it to the Volume field.
func (o *OptionsMarketData) SetVolume(v string) {
	o.Volume = &v
}

func (o OptionsMarketData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptionsMarketData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdjustedMarkPrice) {
		toSerialize["adjusted_mark_price"] = o.AdjustedMarkPrice
	}
	if !IsNil(o.AskPrice) {
		toSerialize["ask_price"] = o.AskPrice
	}
	if !IsNil(o.AskSize) {
		toSerialize["ask_size"] = o.AskSize
	}
	if !IsNil(o.BidPrice) {
		toSerialize["bid_price"] = o.BidPrice
	}
	if !IsNil(o.BidSize) {
		toSerialize["bid_size"] = o.BidSize
	}
	if !IsNil(o.BreakEvenPrice) {
		toSerialize["break_even_price"] = o.BreakEvenPrice
	}
	if !IsNil(o.ChanceOfProfitLong) {
		toSerialize["chance_of_profit_long"] = o.ChanceOfProfitLong
	}
	if !IsNil(o.ChanceOfProfitShort) {
		toSerialize["chance_of_profit_short"] = o.ChanceOfProfitShort
	}
	if !IsNil(o.Delta) {
		toSerialize["delta"] = o.Delta
	}
	if !IsNil(o.Gamma) {
		toSerialize["gamma"] = o.Gamma
	}
	if !IsNil(o.HighPrice) {
		toSerialize["high_price"] = o.HighPrice
	}
	if !IsNil(o.ImpliedVolatility) {
		toSerialize["implied_volatility"] = o.ImpliedVolatility
	}
	if !IsNil(o.Instrument) {
		toSerialize["instrument"] = o.Instrument
	}
	if !IsNil(o.LastTradePrice) {
		toSerialize["last_trade_price"] = o.LastTradePrice
	}
	if !IsNil(o.LastTradeSize) {
		toSerialize["last_trade_size"] = o.LastTradeSize
	}
	if !IsNil(o.LowPrice) {
		toSerialize["low_price"] = o.LowPrice
	}
	if !IsNil(o.MarkPrice) {
		toSerialize["mark_price"] = o.MarkPrice
	}
	if !IsNil(o.OpenInterest) {
		toSerialize["open_interest"] = o.OpenInterest
	}
	if !IsNil(o.PreviousCloseDate) {
		toSerialize["previous_close_date"] = o.PreviousCloseDate
	}
	if !IsNil(o.PreviousClosePrice) {
		toSerialize["previous_close_price"] = o.PreviousClosePrice
	}
	if !IsNil(o.Rho) {
		toSerialize["rho"] = o.Rho
	}
	if !IsNil(o.Theta) {
		toSerialize["theta"] = o.Theta
	}
	if !IsNil(o.Vega) {
		toSerialize["vega"] = o.Vega
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

type NullableOptionsMarketData struct {
	value *OptionsMarketData
	isSet bool
}

func (v NullableOptionsMarketData) Get() *OptionsMarketData {
	return v.value
}

func (v *NullableOptionsMarketData) Set(val *OptionsMarketData) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionsMarketData) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionsMarketData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionsMarketData(val *OptionsMarketData) *NullableOptionsMarketData {
	return &NullableOptionsMarketData{value: val, isSet: true}
}

func (v NullableOptionsMarketData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionsMarketData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


