/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CryptoOrderOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoOrderOutput{}

// CryptoOrderOutput struct for CryptoOrderOutput
type CryptoOrderOutput struct {
	Account *string `json:"account,omitempty"`
	AveragePrice *string `json:"average_price,omitempty"`
	Cancel *string `json:"cancel,omitempty"`
	CancelUrl *string `json:"cancel_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	CumulativeQuantity *string `json:"cumulative_quantity,omitempty"`
	CurrencyPairId *string `json:"currency_pair_id,omitempty"`
	Executions []Execution `json:"executions,omitempty"`
	Id *string `json:"id,omitempty"`
	LastTransactionAt *string `json:"last_transaction_at,omitempty"`
	Price *string `json:"price,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
	RejectReason *string `json:"reject_reason,omitempty"`
	Side *Side `json:"side,omitempty"`
	State *string `json:"state,omitempty"`
	StopPrice *string `json:"stop_price,omitempty"`
	TimeInForce *TimeInForce `json:"time_in_force,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewCryptoOrderOutput instantiates a new CryptoOrderOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoOrderOutput() *CryptoOrderOutput {
	this := CryptoOrderOutput{}
	return &this
}

// NewCryptoOrderOutputWithDefaults instantiates a new CryptoOrderOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoOrderOutputWithDefaults() *CryptoOrderOutput {
	this := CryptoOrderOutput{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *CryptoOrderOutput) SetAccount(v string) {
	o.Account = &v
}

// GetAveragePrice returns the AveragePrice field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetAveragePrice() string {
	if o == nil || IsNil(o.AveragePrice) {
		var ret string
		return ret
	}
	return *o.AveragePrice
}

// GetAveragePriceOk returns a tuple with the AveragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetAveragePriceOk() (*string, bool) {
	if o == nil || IsNil(o.AveragePrice) {
		return nil, false
	}
	return o.AveragePrice, true
}

// HasAveragePrice returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasAveragePrice() bool {
	if o != nil && !IsNil(o.AveragePrice) {
		return true
	}

	return false
}

// SetAveragePrice gets a reference to the given string and assigns it to the AveragePrice field.
func (o *CryptoOrderOutput) SetAveragePrice(v string) {
	o.AveragePrice = &v
}

// GetCancel returns the Cancel field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetCancel() string {
	if o == nil || IsNil(o.Cancel) {
		var ret string
		return ret
	}
	return *o.Cancel
}

// GetCancelOk returns a tuple with the Cancel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetCancelOk() (*string, bool) {
	if o == nil || IsNil(o.Cancel) {
		return nil, false
	}
	return o.Cancel, true
}

// HasCancel returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasCancel() bool {
	if o != nil && !IsNil(o.Cancel) {
		return true
	}

	return false
}

// SetCancel gets a reference to the given string and assigns it to the Cancel field.
func (o *CryptoOrderOutput) SetCancel(v string) {
	o.Cancel = &v
}

// GetCancelUrl returns the CancelUrl field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetCancelUrl() string {
	if o == nil || IsNil(o.CancelUrl) {
		var ret string
		return ret
	}
	return *o.CancelUrl
}

// GetCancelUrlOk returns a tuple with the CancelUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetCancelUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CancelUrl) {
		return nil, false
	}
	return o.CancelUrl, true
}

// HasCancelUrl returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasCancelUrl() bool {
	if o != nil && !IsNil(o.CancelUrl) {
		return true
	}

	return false
}

// SetCancelUrl gets a reference to the given string and assigns it to the CancelUrl field.
func (o *CryptoOrderOutput) SetCancelUrl(v string) {
	o.CancelUrl = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *CryptoOrderOutput) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCumulativeQuantity returns the CumulativeQuantity field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetCumulativeQuantity() string {
	if o == nil || IsNil(o.CumulativeQuantity) {
		var ret string
		return ret
	}
	return *o.CumulativeQuantity
}

// GetCumulativeQuantityOk returns a tuple with the CumulativeQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetCumulativeQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.CumulativeQuantity) {
		return nil, false
	}
	return o.CumulativeQuantity, true
}

// HasCumulativeQuantity returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasCumulativeQuantity() bool {
	if o != nil && !IsNil(o.CumulativeQuantity) {
		return true
	}

	return false
}

// SetCumulativeQuantity gets a reference to the given string and assigns it to the CumulativeQuantity field.
func (o *CryptoOrderOutput) SetCumulativeQuantity(v string) {
	o.CumulativeQuantity = &v
}

// GetCurrencyPairId returns the CurrencyPairId field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetCurrencyPairId() string {
	if o == nil || IsNil(o.CurrencyPairId) {
		var ret string
		return ret
	}
	return *o.CurrencyPairId
}

// GetCurrencyPairIdOk returns a tuple with the CurrencyPairId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetCurrencyPairIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyPairId) {
		return nil, false
	}
	return o.CurrencyPairId, true
}

// HasCurrencyPairId returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasCurrencyPairId() bool {
	if o != nil && !IsNil(o.CurrencyPairId) {
		return true
	}

	return false
}

// SetCurrencyPairId gets a reference to the given string and assigns it to the CurrencyPairId field.
func (o *CryptoOrderOutput) SetCurrencyPairId(v string) {
	o.CurrencyPairId = &v
}

// GetExecutions returns the Executions field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetExecutions() []Execution {
	if o == nil || IsNil(o.Executions) {
		var ret []Execution
		return ret
	}
	return o.Executions
}

// GetExecutionsOk returns a tuple with the Executions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetExecutionsOk() ([]Execution, bool) {
	if o == nil || IsNil(o.Executions) {
		return nil, false
	}
	return o.Executions, true
}

// HasExecutions returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasExecutions() bool {
	if o != nil && !IsNil(o.Executions) {
		return true
	}

	return false
}

// SetExecutions gets a reference to the given []Execution and assigns it to the Executions field.
func (o *CryptoOrderOutput) SetExecutions(v []Execution) {
	o.Executions = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CryptoOrderOutput) SetId(v string) {
	o.Id = &v
}

// GetLastTransactionAt returns the LastTransactionAt field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetLastTransactionAt() string {
	if o == nil || IsNil(o.LastTransactionAt) {
		var ret string
		return ret
	}
	return *o.LastTransactionAt
}

// GetLastTransactionAtOk returns a tuple with the LastTransactionAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetLastTransactionAtOk() (*string, bool) {
	if o == nil || IsNil(o.LastTransactionAt) {
		return nil, false
	}
	return o.LastTransactionAt, true
}

// HasLastTransactionAt returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasLastTransactionAt() bool {
	if o != nil && !IsNil(o.LastTransactionAt) {
		return true
	}

	return false
}

// SetLastTransactionAt gets a reference to the given string and assigns it to the LastTransactionAt field.
func (o *CryptoOrderOutput) SetLastTransactionAt(v string) {
	o.LastTransactionAt = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *CryptoOrderOutput) SetPrice(v string) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *CryptoOrderOutput) SetQuantity(v string) {
	o.Quantity = &v
}

// GetRejectReason returns the RejectReason field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetRejectReason() string {
	if o == nil || IsNil(o.RejectReason) {
		var ret string
		return ret
	}
	return *o.RejectReason
}

// GetRejectReasonOk returns a tuple with the RejectReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetRejectReasonOk() (*string, bool) {
	if o == nil || IsNil(o.RejectReason) {
		return nil, false
	}
	return o.RejectReason, true
}

// HasRejectReason returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasRejectReason() bool {
	if o != nil && !IsNil(o.RejectReason) {
		return true
	}

	return false
}

// SetRejectReason gets a reference to the given string and assigns it to the RejectReason field.
func (o *CryptoOrderOutput) SetRejectReason(v string) {
	o.RejectReason = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetSide() Side {
	if o == nil || IsNil(o.Side) {
		var ret Side
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetSideOk() (*Side, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given Side and assigns it to the Side field.
func (o *CryptoOrderOutput) SetSide(v Side) {
	o.Side = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CryptoOrderOutput) SetState(v string) {
	o.State = &v
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetStopPrice() string {
	if o == nil || IsNil(o.StopPrice) {
		var ret string
		return ret
	}
	return *o.StopPrice
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetStopPriceOk() (*string, bool) {
	if o == nil || IsNil(o.StopPrice) {
		return nil, false
	}
	return o.StopPrice, true
}

// HasStopPrice returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasStopPrice() bool {
	if o != nil && !IsNil(o.StopPrice) {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given string and assigns it to the StopPrice field.
func (o *CryptoOrderOutput) SetStopPrice(v string) {
	o.StopPrice = &v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetTimeInForce() TimeInForce {
	if o == nil || IsNil(o.TimeInForce) {
		var ret TimeInForce
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetTimeInForceOk() (*TimeInForce, bool) {
	if o == nil || IsNil(o.TimeInForce) {
		return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasTimeInForce() bool {
	if o != nil && !IsNil(o.TimeInForce) {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given TimeInForce and assigns it to the TimeInForce field.
func (o *CryptoOrderOutput) SetTimeInForce(v TimeInForce) {
	o.TimeInForce = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CryptoOrderOutput) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderOutput) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CryptoOrderOutput) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CryptoOrderOutput) SetType(v string) {
	o.Type = &v
}

func (o CryptoOrderOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoOrderOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.AveragePrice) {
		toSerialize["average_price"] = o.AveragePrice
	}
	if !IsNil(o.Cancel) {
		toSerialize["cancel"] = o.Cancel
	}
	if !IsNil(o.CancelUrl) {
		toSerialize["cancel_url"] = o.CancelUrl
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CumulativeQuantity) {
		toSerialize["cumulative_quantity"] = o.CumulativeQuantity
	}
	if !IsNil(o.CurrencyPairId) {
		toSerialize["currency_pair_id"] = o.CurrencyPairId
	}
	if !IsNil(o.Executions) {
		toSerialize["executions"] = o.Executions
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastTransactionAt) {
		toSerialize["last_transaction_at"] = o.LastTransactionAt
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.RejectReason) {
		toSerialize["reject_reason"] = o.RejectReason
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.StopPrice) {
		toSerialize["stop_price"] = o.StopPrice
	}
	if !IsNil(o.TimeInForce) {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCryptoOrderOutput struct {
	value *CryptoOrderOutput
	isSet bool
}

func (v NullableCryptoOrderOutput) Get() *CryptoOrderOutput {
	return v.value
}

func (v *NullableCryptoOrderOutput) Set(val *CryptoOrderOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoOrderOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoOrderOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoOrderOutput(val *CryptoOrderOutput) *NullableCryptoOrderOutput {
	return &NullableCryptoOrderOutput{value: val, isSet: true}
}

func (v NullableCryptoOrderOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoOrderOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


