/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the BasicInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasicInfo{}

// BasicInfo struct for BasicInfo
type BasicInfo struct {
	Address *string `json:"address,omitempty"`
	Citizenship *string `json:"citizenship,omitempty"`
	City *string `json:"city,omitempty"`
	CountryOfResidence *string `json:"country_of_residence,omitempty"`
	DateOfBirth *string `json:"date_of_birth,omitempty"`
	MaritalStatus *MaritalStatus `json:"marital_status,omitempty"`
	NumberDependents *string `json:"number_dependents,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	State *string `json:"state,omitempty"`
	TaxIdSsn *string `json:"tax_id_ssn,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	User *string `json:"user,omitempty"`
	Zipcode *string `json:"zipcode,omitempty"`
}

// NewBasicInfo instantiates a new BasicInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicInfo() *BasicInfo {
	this := BasicInfo{}
	return &this
}

// NewBasicInfoWithDefaults instantiates a new BasicInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicInfoWithDefaults() *BasicInfo {
	this := BasicInfo{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *BasicInfo) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *BasicInfo) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *BasicInfo) SetAddress(v string) {
	o.Address = &v
}

// GetCitizenship returns the Citizenship field value if set, zero value otherwise.
func (o *BasicInfo) GetCitizenship() string {
	if o == nil || IsNil(o.Citizenship) {
		var ret string
		return ret
	}
	return *o.Citizenship
}

// GetCitizenshipOk returns a tuple with the Citizenship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetCitizenshipOk() (*string, bool) {
	if o == nil || IsNil(o.Citizenship) {
		return nil, false
	}
	return o.Citizenship, true
}

// HasCitizenship returns a boolean if a field has been set.
func (o *BasicInfo) HasCitizenship() bool {
	if o != nil && !IsNil(o.Citizenship) {
		return true
	}

	return false
}

// SetCitizenship gets a reference to the given string and assigns it to the Citizenship field.
func (o *BasicInfo) SetCitizenship(v string) {
	o.Citizenship = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *BasicInfo) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *BasicInfo) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *BasicInfo) SetCity(v string) {
	o.City = &v
}

// GetCountryOfResidence returns the CountryOfResidence field value if set, zero value otherwise.
func (o *BasicInfo) GetCountryOfResidence() string {
	if o == nil || IsNil(o.CountryOfResidence) {
		var ret string
		return ret
	}
	return *o.CountryOfResidence
}

// GetCountryOfResidenceOk returns a tuple with the CountryOfResidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetCountryOfResidenceOk() (*string, bool) {
	if o == nil || IsNil(o.CountryOfResidence) {
		return nil, false
	}
	return o.CountryOfResidence, true
}

// HasCountryOfResidence returns a boolean if a field has been set.
func (o *BasicInfo) HasCountryOfResidence() bool {
	if o != nil && !IsNil(o.CountryOfResidence) {
		return true
	}

	return false
}

// SetCountryOfResidence gets a reference to the given string and assigns it to the CountryOfResidence field.
func (o *BasicInfo) SetCountryOfResidence(v string) {
	o.CountryOfResidence = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *BasicInfo) GetDateOfBirth() string {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetDateOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *BasicInfo) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *BasicInfo) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetMaritalStatus returns the MaritalStatus field value if set, zero value otherwise.
func (o *BasicInfo) GetMaritalStatus() MaritalStatus {
	if o == nil || IsNil(o.MaritalStatus) {
		var ret MaritalStatus
		return ret
	}
	return *o.MaritalStatus
}

// GetMaritalStatusOk returns a tuple with the MaritalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetMaritalStatusOk() (*MaritalStatus, bool) {
	if o == nil || IsNil(o.MaritalStatus) {
		return nil, false
	}
	return o.MaritalStatus, true
}

// HasMaritalStatus returns a boolean if a field has been set.
func (o *BasicInfo) HasMaritalStatus() bool {
	if o != nil && !IsNil(o.MaritalStatus) {
		return true
	}

	return false
}

// SetMaritalStatus gets a reference to the given MaritalStatus and assigns it to the MaritalStatus field.
func (o *BasicInfo) SetMaritalStatus(v MaritalStatus) {
	o.MaritalStatus = &v
}

// GetNumberDependents returns the NumberDependents field value if set, zero value otherwise.
func (o *BasicInfo) GetNumberDependents() string {
	if o == nil || IsNil(o.NumberDependents) {
		var ret string
		return ret
	}
	return *o.NumberDependents
}

// GetNumberDependentsOk returns a tuple with the NumberDependents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetNumberDependentsOk() (*string, bool) {
	if o == nil || IsNil(o.NumberDependents) {
		return nil, false
	}
	return o.NumberDependents, true
}

// HasNumberDependents returns a boolean if a field has been set.
func (o *BasicInfo) HasNumberDependents() bool {
	if o != nil && !IsNil(o.NumberDependents) {
		return true
	}

	return false
}

// SetNumberDependents gets a reference to the given string and assigns it to the NumberDependents field.
func (o *BasicInfo) SetNumberDependents(v string) {
	o.NumberDependents = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *BasicInfo) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *BasicInfo) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *BasicInfo) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *BasicInfo) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *BasicInfo) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *BasicInfo) SetState(v string) {
	o.State = &v
}

// GetTaxIdSsn returns the TaxIdSsn field value if set, zero value otherwise.
func (o *BasicInfo) GetTaxIdSsn() string {
	if o == nil || IsNil(o.TaxIdSsn) {
		var ret string
		return ret
	}
	return *o.TaxIdSsn
}

// GetTaxIdSsnOk returns a tuple with the TaxIdSsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetTaxIdSsnOk() (*string, bool) {
	if o == nil || IsNil(o.TaxIdSsn) {
		return nil, false
	}
	return o.TaxIdSsn, true
}

// HasTaxIdSsn returns a boolean if a field has been set.
func (o *BasicInfo) HasTaxIdSsn() bool {
	if o != nil && !IsNil(o.TaxIdSsn) {
		return true
	}

	return false
}

// SetTaxIdSsn gets a reference to the given string and assigns it to the TaxIdSsn field.
func (o *BasicInfo) SetTaxIdSsn(v string) {
	o.TaxIdSsn = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *BasicInfo) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *BasicInfo) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *BasicInfo) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *BasicInfo) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *BasicInfo) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *BasicInfo) SetUser(v string) {
	o.User = &v
}

// GetZipcode returns the Zipcode field value if set, zero value otherwise.
func (o *BasicInfo) GetZipcode() string {
	if o == nil || IsNil(o.Zipcode) {
		var ret string
		return ret
	}
	return *o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicInfo) GetZipcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Zipcode) {
		return nil, false
	}
	return o.Zipcode, true
}

// HasZipcode returns a boolean if a field has been set.
func (o *BasicInfo) HasZipcode() bool {
	if o != nil && !IsNil(o.Zipcode) {
		return true
	}

	return false
}

// SetZipcode gets a reference to the given string and assigns it to the Zipcode field.
func (o *BasicInfo) SetZipcode(v string) {
	o.Zipcode = &v
}

func (o BasicInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasicInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Citizenship) {
		toSerialize["citizenship"] = o.Citizenship
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.CountryOfResidence) {
		toSerialize["country_of_residence"] = o.CountryOfResidence
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if !IsNil(o.MaritalStatus) {
		toSerialize["marital_status"] = o.MaritalStatus
	}
	if !IsNil(o.NumberDependents) {
		toSerialize["number_dependents"] = o.NumberDependents
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.TaxIdSsn) {
		toSerialize["tax_id_ssn"] = o.TaxIdSsn
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Zipcode) {
		toSerialize["zipcode"] = o.Zipcode
	}
	return toSerialize, nil
}

type NullableBasicInfo struct {
	value *BasicInfo
	isSet bool
}

func (v NullableBasicInfo) Get() *BasicInfo {
	return v.value
}

func (v *NullableBasicInfo) Set(val *BasicInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicInfo(val *BasicInfo) *NullableBasicInfo {
	return &NullableBasicInfo{value: val, isSet: true}
}

func (v NullableBasicInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


