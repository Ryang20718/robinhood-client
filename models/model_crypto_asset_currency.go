/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CryptoAssetCurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CryptoAssetCurrency{}

// CryptoAssetCurrency struct for CryptoAssetCurrency
type CryptoAssetCurrency struct {
	BrandColor *string `json:"brand_color,omitempty"`
	Code *string `json:"code,omitempty"`
	Id *string `json:"id,omitempty"`
	Increment *string `json:"increment,omitempty"`
	Name interface{} `json:"name,omitempty"`
}

// NewCryptoAssetCurrency instantiates a new CryptoAssetCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoAssetCurrency() *CryptoAssetCurrency {
	this := CryptoAssetCurrency{}
	return &this
}

// NewCryptoAssetCurrencyWithDefaults instantiates a new CryptoAssetCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoAssetCurrencyWithDefaults() *CryptoAssetCurrency {
	this := CryptoAssetCurrency{}
	return &this
}

// GetBrandColor returns the BrandColor field value if set, zero value otherwise.
func (o *CryptoAssetCurrency) GetBrandColor() string {
	if o == nil || IsNil(o.BrandColor) {
		var ret string
		return ret
	}
	return *o.BrandColor
}

// GetBrandColorOk returns a tuple with the BrandColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoAssetCurrency) GetBrandColorOk() (*string, bool) {
	if o == nil || IsNil(o.BrandColor) {
		return nil, false
	}
	return o.BrandColor, true
}

// HasBrandColor returns a boolean if a field has been set.
func (o *CryptoAssetCurrency) HasBrandColor() bool {
	if o != nil && !IsNil(o.BrandColor) {
		return true
	}

	return false
}

// SetBrandColor gets a reference to the given string and assigns it to the BrandColor field.
func (o *CryptoAssetCurrency) SetBrandColor(v string) {
	o.BrandColor = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CryptoAssetCurrency) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoAssetCurrency) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CryptoAssetCurrency) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CryptoAssetCurrency) SetCode(v string) {
	o.Code = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CryptoAssetCurrency) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoAssetCurrency) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CryptoAssetCurrency) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CryptoAssetCurrency) SetId(v string) {
	o.Id = &v
}

// GetIncrement returns the Increment field value if set, zero value otherwise.
func (o *CryptoAssetCurrency) GetIncrement() string {
	if o == nil || IsNil(o.Increment) {
		var ret string
		return ret
	}
	return *o.Increment
}

// GetIncrementOk returns a tuple with the Increment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoAssetCurrency) GetIncrementOk() (*string, bool) {
	if o == nil || IsNil(o.Increment) {
		return nil, false
	}
	return o.Increment, true
}

// HasIncrement returns a boolean if a field has been set.
func (o *CryptoAssetCurrency) HasIncrement() bool {
	if o != nil && !IsNil(o.Increment) {
		return true
	}

	return false
}

// SetIncrement gets a reference to the given string and assigns it to the Increment field.
func (o *CryptoAssetCurrency) SetIncrement(v string) {
	o.Increment = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CryptoAssetCurrency) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CryptoAssetCurrency) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CryptoAssetCurrency) HasName() bool {
	if o != nil && IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given interface{} and assigns it to the Name field.
func (o *CryptoAssetCurrency) SetName(v interface{}) {
	o.Name = v
}

func (o CryptoAssetCurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CryptoAssetCurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrandColor) {
		toSerialize["brand_color"] = o.BrandColor
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Increment) {
		toSerialize["increment"] = o.Increment
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableCryptoAssetCurrency struct {
	value *CryptoAssetCurrency
	isSet bool
}

func (v NullableCryptoAssetCurrency) Get() *CryptoAssetCurrency {
	return v.value
}

func (v *NullableCryptoAssetCurrency) Set(val *CryptoAssetCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoAssetCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoAssetCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoAssetCurrency(val *CryptoAssetCurrency) *NullableCryptoAssetCurrency {
	return &NullableCryptoAssetCurrency{value: val, isSet: true}
}

func (v NullableCryptoAssetCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoAssetCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


