/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LiquidityNeeds the model 'LiquidityNeeds'
type LiquidityNeeds string

// List of LiquidityNeeds
const (
	NOT_IMPORTANT_LIQ_NEED LiquidityNeeds = "not_important_liq_need"
	SOMEWHAT_IMPORTANT_LIQ_NEED LiquidityNeeds = "somewhat_important_liq_need"
	VERY_IMPORTANT_LIQ_NEED LiquidityNeeds = "very_important_liq_need"
)

// All allowed values of LiquidityNeeds enum
var AllowedLiquidityNeedsEnumValues = []LiquidityNeeds{
	"not_important_liq_need",
	"somewhat_important_liq_need",
	"very_important_liq_need",
}

func (v *LiquidityNeeds) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LiquidityNeeds(value)
	for _, existing := range AllowedLiquidityNeedsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LiquidityNeeds", value)
}

// NewLiquidityNeedsFromValue returns a pointer to a valid LiquidityNeeds
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLiquidityNeedsFromValue(v string) (*LiquidityNeeds, error) {
	ev := LiquidityNeeds(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LiquidityNeeds: valid values are %v", v, AllowedLiquidityNeedsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LiquidityNeeds) IsValid() bool {
	for _, existing := range AllowedLiquidityNeedsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LiquidityNeeds value
func (v LiquidityNeeds) Ptr() *LiquidityNeeds {
	return &v
}

type NullableLiquidityNeeds struct {
	value *LiquidityNeeds
	isSet bool
}

func (v NullableLiquidityNeeds) Get() *LiquidityNeeds {
	return v.value
}

func (v *NullableLiquidityNeeds) Set(val *LiquidityNeeds) {
	v.value = val
	v.isSet = true
}

func (v NullableLiquidityNeeds) IsSet() bool {
	return v.isSet
}

func (v *NullableLiquidityNeeds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiquidityNeeds(val *LiquidityNeeds) *NullableLiquidityNeeds {
	return &NullableLiquidityNeeds{value: val, isSet: true}
}

func (v NullableLiquidityNeeds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiquidityNeeds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

