/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MinTicks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MinTicks{}

// MinTicks struct for MinTicks
type MinTicks struct {
	AboveTick *string `json:"above_tick,omitempty"`
	BelowTick *string `json:"below_tick,omitempty"`
	CutoffPrice *string `json:"cutoff_price,omitempty"`
}

// NewMinTicks instantiates a new MinTicks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinTicks() *MinTicks {
	this := MinTicks{}
	return &this
}

// NewMinTicksWithDefaults instantiates a new MinTicks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinTicksWithDefaults() *MinTicks {
	this := MinTicks{}
	return &this
}

// GetAboveTick returns the AboveTick field value if set, zero value otherwise.
func (o *MinTicks) GetAboveTick() string {
	if o == nil || IsNil(o.AboveTick) {
		var ret string
		return ret
	}
	return *o.AboveTick
}

// GetAboveTickOk returns a tuple with the AboveTick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinTicks) GetAboveTickOk() (*string, bool) {
	if o == nil || IsNil(o.AboveTick) {
		return nil, false
	}
	return o.AboveTick, true
}

// HasAboveTick returns a boolean if a field has been set.
func (o *MinTicks) HasAboveTick() bool {
	if o != nil && !IsNil(o.AboveTick) {
		return true
	}

	return false
}

// SetAboveTick gets a reference to the given string and assigns it to the AboveTick field.
func (o *MinTicks) SetAboveTick(v string) {
	o.AboveTick = &v
}

// GetBelowTick returns the BelowTick field value if set, zero value otherwise.
func (o *MinTicks) GetBelowTick() string {
	if o == nil || IsNil(o.BelowTick) {
		var ret string
		return ret
	}
	return *o.BelowTick
}

// GetBelowTickOk returns a tuple with the BelowTick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinTicks) GetBelowTickOk() (*string, bool) {
	if o == nil || IsNil(o.BelowTick) {
		return nil, false
	}
	return o.BelowTick, true
}

// HasBelowTick returns a boolean if a field has been set.
func (o *MinTicks) HasBelowTick() bool {
	if o != nil && !IsNil(o.BelowTick) {
		return true
	}

	return false
}

// SetBelowTick gets a reference to the given string and assigns it to the BelowTick field.
func (o *MinTicks) SetBelowTick(v string) {
	o.BelowTick = &v
}

// GetCutoffPrice returns the CutoffPrice field value if set, zero value otherwise.
func (o *MinTicks) GetCutoffPrice() string {
	if o == nil || IsNil(o.CutoffPrice) {
		var ret string
		return ret
	}
	return *o.CutoffPrice
}

// GetCutoffPriceOk returns a tuple with the CutoffPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinTicks) GetCutoffPriceOk() (*string, bool) {
	if o == nil || IsNil(o.CutoffPrice) {
		return nil, false
	}
	return o.CutoffPrice, true
}

// HasCutoffPrice returns a boolean if a field has been set.
func (o *MinTicks) HasCutoffPrice() bool {
	if o != nil && !IsNil(o.CutoffPrice) {
		return true
	}

	return false
}

// SetCutoffPrice gets a reference to the given string and assigns it to the CutoffPrice field.
func (o *MinTicks) SetCutoffPrice(v string) {
	o.CutoffPrice = &v
}

func (o MinTicks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MinTicks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AboveTick) {
		toSerialize["above_tick"] = o.AboveTick
	}
	if !IsNil(o.BelowTick) {
		toSerialize["below_tick"] = o.BelowTick
	}
	if !IsNil(o.CutoffPrice) {
		toSerialize["cutoff_price"] = o.CutoffPrice
	}
	return toSerialize, nil
}

type NullableMinTicks struct {
	value *MinTicks
	isSet bool
}

func (v NullableMinTicks) Get() *MinTicks {
	return v.value
}

func (v *NullableMinTicks) Set(val *MinTicks) {
	v.value = val
	v.isSet = true
}

func (v NullableMinTicks) IsSet() bool {
	return v.isSet
}

func (v *NullableMinTicks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinTicks(val *MinTicks) *NullableMinTicks {
	return &NullableMinTicks{value: val, isSet: true}
}

func (v NullableMinTicks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinTicks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


