/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Quote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Quote{}

// Quote struct for Quote
type Quote struct {
	AdjustedPreviousClose *string `json:"adjusted_previous_close,omitempty"`
	AskPrice *string `json:"ask_price,omitempty"`
	AskSize *int32 `json:"ask_size,omitempty"`
	BidPrice *string `json:"bid_price,omitempty"`
	BidSize *int32 `json:"bid_size,omitempty"`
	LastExtendedHoursTradePrice *string `json:"last_extended_hours_trade_price,omitempty"`
	LastTradePrice *string `json:"last_trade_price,omitempty"`
	PreviousClose *string `json:"previous_close,omitempty"`
	PreviousCloseDate *string `json:"previous_close_date,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	TradingHalted *bool `json:"trading_halted,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// NewQuote instantiates a new Quote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuote() *Quote {
	this := Quote{}
	return &this
}

// NewQuoteWithDefaults instantiates a new Quote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteWithDefaults() *Quote {
	this := Quote{}
	return &this
}

// GetAdjustedPreviousClose returns the AdjustedPreviousClose field value if set, zero value otherwise.
func (o *Quote) GetAdjustedPreviousClose() string {
	if o == nil || IsNil(o.AdjustedPreviousClose) {
		var ret string
		return ret
	}
	return *o.AdjustedPreviousClose
}

// GetAdjustedPreviousCloseOk returns a tuple with the AdjustedPreviousClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetAdjustedPreviousCloseOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustedPreviousClose) {
		return nil, false
	}
	return o.AdjustedPreviousClose, true
}

// HasAdjustedPreviousClose returns a boolean if a field has been set.
func (o *Quote) HasAdjustedPreviousClose() bool {
	if o != nil && !IsNil(o.AdjustedPreviousClose) {
		return true
	}

	return false
}

// SetAdjustedPreviousClose gets a reference to the given string and assigns it to the AdjustedPreviousClose field.
func (o *Quote) SetAdjustedPreviousClose(v string) {
	o.AdjustedPreviousClose = &v
}

// GetAskPrice returns the AskPrice field value if set, zero value otherwise.
func (o *Quote) GetAskPrice() string {
	if o == nil || IsNil(o.AskPrice) {
		var ret string
		return ret
	}
	return *o.AskPrice
}

// GetAskPriceOk returns a tuple with the AskPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetAskPriceOk() (*string, bool) {
	if o == nil || IsNil(o.AskPrice) {
		return nil, false
	}
	return o.AskPrice, true
}

// HasAskPrice returns a boolean if a field has been set.
func (o *Quote) HasAskPrice() bool {
	if o != nil && !IsNil(o.AskPrice) {
		return true
	}

	return false
}

// SetAskPrice gets a reference to the given string and assigns it to the AskPrice field.
func (o *Quote) SetAskPrice(v string) {
	o.AskPrice = &v
}

// GetAskSize returns the AskSize field value if set, zero value otherwise.
func (o *Quote) GetAskSize() int32 {
	if o == nil || IsNil(o.AskSize) {
		var ret int32
		return ret
	}
	return *o.AskSize
}

// GetAskSizeOk returns a tuple with the AskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetAskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.AskSize) {
		return nil, false
	}
	return o.AskSize, true
}

// HasAskSize returns a boolean if a field has been set.
func (o *Quote) HasAskSize() bool {
	if o != nil && !IsNil(o.AskSize) {
		return true
	}

	return false
}

// SetAskSize gets a reference to the given int32 and assigns it to the AskSize field.
func (o *Quote) SetAskSize(v int32) {
	o.AskSize = &v
}

// GetBidPrice returns the BidPrice field value if set, zero value otherwise.
func (o *Quote) GetBidPrice() string {
	if o == nil || IsNil(o.BidPrice) {
		var ret string
		return ret
	}
	return *o.BidPrice
}

// GetBidPriceOk returns a tuple with the BidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetBidPriceOk() (*string, bool) {
	if o == nil || IsNil(o.BidPrice) {
		return nil, false
	}
	return o.BidPrice, true
}

// HasBidPrice returns a boolean if a field has been set.
func (o *Quote) HasBidPrice() bool {
	if o != nil && !IsNil(o.BidPrice) {
		return true
	}

	return false
}

// SetBidPrice gets a reference to the given string and assigns it to the BidPrice field.
func (o *Quote) SetBidPrice(v string) {
	o.BidPrice = &v
}

// GetBidSize returns the BidSize field value if set, zero value otherwise.
func (o *Quote) GetBidSize() int32 {
	if o == nil || IsNil(o.BidSize) {
		var ret int32
		return ret
	}
	return *o.BidSize
}

// GetBidSizeOk returns a tuple with the BidSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetBidSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.BidSize) {
		return nil, false
	}
	return o.BidSize, true
}

// HasBidSize returns a boolean if a field has been set.
func (o *Quote) HasBidSize() bool {
	if o != nil && !IsNil(o.BidSize) {
		return true
	}

	return false
}

// SetBidSize gets a reference to the given int32 and assigns it to the BidSize field.
func (o *Quote) SetBidSize(v int32) {
	o.BidSize = &v
}

// GetLastExtendedHoursTradePrice returns the LastExtendedHoursTradePrice field value if set, zero value otherwise.
func (o *Quote) GetLastExtendedHoursTradePrice() string {
	if o == nil || IsNil(o.LastExtendedHoursTradePrice) {
		var ret string
		return ret
	}
	return *o.LastExtendedHoursTradePrice
}

// GetLastExtendedHoursTradePriceOk returns a tuple with the LastExtendedHoursTradePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetLastExtendedHoursTradePriceOk() (*string, bool) {
	if o == nil || IsNil(o.LastExtendedHoursTradePrice) {
		return nil, false
	}
	return o.LastExtendedHoursTradePrice, true
}

// HasLastExtendedHoursTradePrice returns a boolean if a field has been set.
func (o *Quote) HasLastExtendedHoursTradePrice() bool {
	if o != nil && !IsNil(o.LastExtendedHoursTradePrice) {
		return true
	}

	return false
}

// SetLastExtendedHoursTradePrice gets a reference to the given string and assigns it to the LastExtendedHoursTradePrice field.
func (o *Quote) SetLastExtendedHoursTradePrice(v string) {
	o.LastExtendedHoursTradePrice = &v
}

// GetLastTradePrice returns the LastTradePrice field value if set, zero value otherwise.
func (o *Quote) GetLastTradePrice() string {
	if o == nil || IsNil(o.LastTradePrice) {
		var ret string
		return ret
	}
	return *o.LastTradePrice
}

// GetLastTradePriceOk returns a tuple with the LastTradePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetLastTradePriceOk() (*string, bool) {
	if o == nil || IsNil(o.LastTradePrice) {
		return nil, false
	}
	return o.LastTradePrice, true
}

// HasLastTradePrice returns a boolean if a field has been set.
func (o *Quote) HasLastTradePrice() bool {
	if o != nil && !IsNil(o.LastTradePrice) {
		return true
	}

	return false
}

// SetLastTradePrice gets a reference to the given string and assigns it to the LastTradePrice field.
func (o *Quote) SetLastTradePrice(v string) {
	o.LastTradePrice = &v
}

// GetPreviousClose returns the PreviousClose field value if set, zero value otherwise.
func (o *Quote) GetPreviousClose() string {
	if o == nil || IsNil(o.PreviousClose) {
		var ret string
		return ret
	}
	return *o.PreviousClose
}

// GetPreviousCloseOk returns a tuple with the PreviousClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetPreviousCloseOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousClose) {
		return nil, false
	}
	return o.PreviousClose, true
}

// HasPreviousClose returns a boolean if a field has been set.
func (o *Quote) HasPreviousClose() bool {
	if o != nil && !IsNil(o.PreviousClose) {
		return true
	}

	return false
}

// SetPreviousClose gets a reference to the given string and assigns it to the PreviousClose field.
func (o *Quote) SetPreviousClose(v string) {
	o.PreviousClose = &v
}

// GetPreviousCloseDate returns the PreviousCloseDate field value if set, zero value otherwise.
func (o *Quote) GetPreviousCloseDate() string {
	if o == nil || IsNil(o.PreviousCloseDate) {
		var ret string
		return ret
	}
	return *o.PreviousCloseDate
}

// GetPreviousCloseDateOk returns a tuple with the PreviousCloseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetPreviousCloseDateOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousCloseDate) {
		return nil, false
	}
	return o.PreviousCloseDate, true
}

// HasPreviousCloseDate returns a boolean if a field has been set.
func (o *Quote) HasPreviousCloseDate() bool {
	if o != nil && !IsNil(o.PreviousCloseDate) {
		return true
	}

	return false
}

// SetPreviousCloseDate gets a reference to the given string and assigns it to the PreviousCloseDate field.
func (o *Quote) SetPreviousCloseDate(v string) {
	o.PreviousCloseDate = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Quote) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Quote) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Quote) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTradingHalted returns the TradingHalted field value if set, zero value otherwise.
func (o *Quote) GetTradingHalted() bool {
	if o == nil || IsNil(o.TradingHalted) {
		var ret bool
		return ret
	}
	return *o.TradingHalted
}

// GetTradingHaltedOk returns a tuple with the TradingHalted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetTradingHaltedOk() (*bool, bool) {
	if o == nil || IsNil(o.TradingHalted) {
		return nil, false
	}
	return o.TradingHalted, true
}

// HasTradingHalted returns a boolean if a field has been set.
func (o *Quote) HasTradingHalted() bool {
	if o != nil && !IsNil(o.TradingHalted) {
		return true
	}

	return false
}

// SetTradingHalted gets a reference to the given bool and assigns it to the TradingHalted field.
func (o *Quote) SetTradingHalted(v bool) {
	o.TradingHalted = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Quote) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Quote) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *Quote) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o Quote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdjustedPreviousClose) {
		toSerialize["adjusted_previous_close"] = o.AdjustedPreviousClose
	}
	if !IsNil(o.AskPrice) {
		toSerialize["ask_price"] = o.AskPrice
	}
	if !IsNil(o.AskSize) {
		toSerialize["ask_size"] = o.AskSize
	}
	if !IsNil(o.BidPrice) {
		toSerialize["bid_price"] = o.BidPrice
	}
	if !IsNil(o.BidSize) {
		toSerialize["bid_size"] = o.BidSize
	}
	if !IsNil(o.LastExtendedHoursTradePrice) {
		toSerialize["last_extended_hours_trade_price"] = o.LastExtendedHoursTradePrice
	}
	if !IsNil(o.LastTradePrice) {
		toSerialize["last_trade_price"] = o.LastTradePrice
	}
	if !IsNil(o.PreviousClose) {
		toSerialize["previous_close"] = o.PreviousClose
	}
	if !IsNil(o.PreviousCloseDate) {
		toSerialize["previous_close_date"] = o.PreviousCloseDate
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.TradingHalted) {
		toSerialize["trading_halted"] = o.TradingHalted
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableQuote struct {
	value *Quote
	isSet bool
}

func (v NullableQuote) Get() *Quote {
	return v.value
}

func (v *NullableQuote) Set(val *Quote) {
	v.value = val
	v.isSet = true
}

func (v NullableQuote) IsSet() bool {
	return v.isSet
}

func (v *NullableQuote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuote(val *Quote) *NullableQuote {
	return &NullableQuote{value: val, isSet: true}
}

func (v NullableQuote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


