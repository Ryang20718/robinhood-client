/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the InvestmentProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvestmentProfile{}

// InvestmentProfile struct for InvestmentProfile
type InvestmentProfile struct {
	AnnualIncome *string `json:"annual_income,omitempty"`
	InvestmentExperience *InvestmentExperience `json:"investment_experience,omitempty"`
	InvestmentObjective *InvestmentObjective `json:"investment_objective,omitempty"`
	LiquidNetWorth *string `json:"liquid_net_worth,omitempty"`
	LiquidityNeeds *LiquidityNeeds `json:"liquidity_needs,omitempty"`
	RiskTolerance *RiskTolerance `json:"risk_tolerance,omitempty"`
	SourceOfFunds *SourceOfFunds `json:"source_of_funds,omitempty"`
	SuitabilityVerified *bool `json:"suitability_verified,omitempty"`
	TaxBracket *TaxBracket `json:"tax_bracket,omitempty"`
	TimeHorizon *TimeHorizon `json:"time_horizon,omitempty"`
	TotalNetWorth *TotalNetWorth `json:"total_net_worth,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	User *string `json:"user,omitempty"`
}

// NewInvestmentProfile instantiates a new InvestmentProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvestmentProfile() *InvestmentProfile {
	this := InvestmentProfile{}
	return &this
}

// NewInvestmentProfileWithDefaults instantiates a new InvestmentProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvestmentProfileWithDefaults() *InvestmentProfile {
	this := InvestmentProfile{}
	return &this
}

// GetAnnualIncome returns the AnnualIncome field value if set, zero value otherwise.
func (o *InvestmentProfile) GetAnnualIncome() string {
	if o == nil || IsNil(o.AnnualIncome) {
		var ret string
		return ret
	}
	return *o.AnnualIncome
}

// GetAnnualIncomeOk returns a tuple with the AnnualIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetAnnualIncomeOk() (*string, bool) {
	if o == nil || IsNil(o.AnnualIncome) {
		return nil, false
	}
	return o.AnnualIncome, true
}

// HasAnnualIncome returns a boolean if a field has been set.
func (o *InvestmentProfile) HasAnnualIncome() bool {
	if o != nil && !IsNil(o.AnnualIncome) {
		return true
	}

	return false
}

// SetAnnualIncome gets a reference to the given string and assigns it to the AnnualIncome field.
func (o *InvestmentProfile) SetAnnualIncome(v string) {
	o.AnnualIncome = &v
}

// GetInvestmentExperience returns the InvestmentExperience field value if set, zero value otherwise.
func (o *InvestmentProfile) GetInvestmentExperience() InvestmentExperience {
	if o == nil || IsNil(o.InvestmentExperience) {
		var ret InvestmentExperience
		return ret
	}
	return *o.InvestmentExperience
}

// GetInvestmentExperienceOk returns a tuple with the InvestmentExperience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetInvestmentExperienceOk() (*InvestmentExperience, bool) {
	if o == nil || IsNil(o.InvestmentExperience) {
		return nil, false
	}
	return o.InvestmentExperience, true
}

// HasInvestmentExperience returns a boolean if a field has been set.
func (o *InvestmentProfile) HasInvestmentExperience() bool {
	if o != nil && !IsNil(o.InvestmentExperience) {
		return true
	}

	return false
}

// SetInvestmentExperience gets a reference to the given InvestmentExperience and assigns it to the InvestmentExperience field.
func (o *InvestmentProfile) SetInvestmentExperience(v InvestmentExperience) {
	o.InvestmentExperience = &v
}

// GetInvestmentObjective returns the InvestmentObjective field value if set, zero value otherwise.
func (o *InvestmentProfile) GetInvestmentObjective() InvestmentObjective {
	if o == nil || IsNil(o.InvestmentObjective) {
		var ret InvestmentObjective
		return ret
	}
	return *o.InvestmentObjective
}

// GetInvestmentObjectiveOk returns a tuple with the InvestmentObjective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetInvestmentObjectiveOk() (*InvestmentObjective, bool) {
	if o == nil || IsNil(o.InvestmentObjective) {
		return nil, false
	}
	return o.InvestmentObjective, true
}

// HasInvestmentObjective returns a boolean if a field has been set.
func (o *InvestmentProfile) HasInvestmentObjective() bool {
	if o != nil && !IsNil(o.InvestmentObjective) {
		return true
	}

	return false
}

// SetInvestmentObjective gets a reference to the given InvestmentObjective and assigns it to the InvestmentObjective field.
func (o *InvestmentProfile) SetInvestmentObjective(v InvestmentObjective) {
	o.InvestmentObjective = &v
}

// GetLiquidNetWorth returns the LiquidNetWorth field value if set, zero value otherwise.
func (o *InvestmentProfile) GetLiquidNetWorth() string {
	if o == nil || IsNil(o.LiquidNetWorth) {
		var ret string
		return ret
	}
	return *o.LiquidNetWorth
}

// GetLiquidNetWorthOk returns a tuple with the LiquidNetWorth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetLiquidNetWorthOk() (*string, bool) {
	if o == nil || IsNil(o.LiquidNetWorth) {
		return nil, false
	}
	return o.LiquidNetWorth, true
}

// HasLiquidNetWorth returns a boolean if a field has been set.
func (o *InvestmentProfile) HasLiquidNetWorth() bool {
	if o != nil && !IsNil(o.LiquidNetWorth) {
		return true
	}

	return false
}

// SetLiquidNetWorth gets a reference to the given string and assigns it to the LiquidNetWorth field.
func (o *InvestmentProfile) SetLiquidNetWorth(v string) {
	o.LiquidNetWorth = &v
}

// GetLiquidityNeeds returns the LiquidityNeeds field value if set, zero value otherwise.
func (o *InvestmentProfile) GetLiquidityNeeds() LiquidityNeeds {
	if o == nil || IsNil(o.LiquidityNeeds) {
		var ret LiquidityNeeds
		return ret
	}
	return *o.LiquidityNeeds
}

// GetLiquidityNeedsOk returns a tuple with the LiquidityNeeds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetLiquidityNeedsOk() (*LiquidityNeeds, bool) {
	if o == nil || IsNil(o.LiquidityNeeds) {
		return nil, false
	}
	return o.LiquidityNeeds, true
}

// HasLiquidityNeeds returns a boolean if a field has been set.
func (o *InvestmentProfile) HasLiquidityNeeds() bool {
	if o != nil && !IsNil(o.LiquidityNeeds) {
		return true
	}

	return false
}

// SetLiquidityNeeds gets a reference to the given LiquidityNeeds and assigns it to the LiquidityNeeds field.
func (o *InvestmentProfile) SetLiquidityNeeds(v LiquidityNeeds) {
	o.LiquidityNeeds = &v
}

// GetRiskTolerance returns the RiskTolerance field value if set, zero value otherwise.
func (o *InvestmentProfile) GetRiskTolerance() RiskTolerance {
	if o == nil || IsNil(o.RiskTolerance) {
		var ret RiskTolerance
		return ret
	}
	return *o.RiskTolerance
}

// GetRiskToleranceOk returns a tuple with the RiskTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetRiskToleranceOk() (*RiskTolerance, bool) {
	if o == nil || IsNil(o.RiskTolerance) {
		return nil, false
	}
	return o.RiskTolerance, true
}

// HasRiskTolerance returns a boolean if a field has been set.
func (o *InvestmentProfile) HasRiskTolerance() bool {
	if o != nil && !IsNil(o.RiskTolerance) {
		return true
	}

	return false
}

// SetRiskTolerance gets a reference to the given RiskTolerance and assigns it to the RiskTolerance field.
func (o *InvestmentProfile) SetRiskTolerance(v RiskTolerance) {
	o.RiskTolerance = &v
}

// GetSourceOfFunds returns the SourceOfFunds field value if set, zero value otherwise.
func (o *InvestmentProfile) GetSourceOfFunds() SourceOfFunds {
	if o == nil || IsNil(o.SourceOfFunds) {
		var ret SourceOfFunds
		return ret
	}
	return *o.SourceOfFunds
}

// GetSourceOfFundsOk returns a tuple with the SourceOfFunds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetSourceOfFundsOk() (*SourceOfFunds, bool) {
	if o == nil || IsNil(o.SourceOfFunds) {
		return nil, false
	}
	return o.SourceOfFunds, true
}

// HasSourceOfFunds returns a boolean if a field has been set.
func (o *InvestmentProfile) HasSourceOfFunds() bool {
	if o != nil && !IsNil(o.SourceOfFunds) {
		return true
	}

	return false
}

// SetSourceOfFunds gets a reference to the given SourceOfFunds and assigns it to the SourceOfFunds field.
func (o *InvestmentProfile) SetSourceOfFunds(v SourceOfFunds) {
	o.SourceOfFunds = &v
}

// GetSuitabilityVerified returns the SuitabilityVerified field value if set, zero value otherwise.
func (o *InvestmentProfile) GetSuitabilityVerified() bool {
	if o == nil || IsNil(o.SuitabilityVerified) {
		var ret bool
		return ret
	}
	return *o.SuitabilityVerified
}

// GetSuitabilityVerifiedOk returns a tuple with the SuitabilityVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetSuitabilityVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.SuitabilityVerified) {
		return nil, false
	}
	return o.SuitabilityVerified, true
}

// HasSuitabilityVerified returns a boolean if a field has been set.
func (o *InvestmentProfile) HasSuitabilityVerified() bool {
	if o != nil && !IsNil(o.SuitabilityVerified) {
		return true
	}

	return false
}

// SetSuitabilityVerified gets a reference to the given bool and assigns it to the SuitabilityVerified field.
func (o *InvestmentProfile) SetSuitabilityVerified(v bool) {
	o.SuitabilityVerified = &v
}

// GetTaxBracket returns the TaxBracket field value if set, zero value otherwise.
func (o *InvestmentProfile) GetTaxBracket() TaxBracket {
	if o == nil || IsNil(o.TaxBracket) {
		var ret TaxBracket
		return ret
	}
	return *o.TaxBracket
}

// GetTaxBracketOk returns a tuple with the TaxBracket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetTaxBracketOk() (*TaxBracket, bool) {
	if o == nil || IsNil(o.TaxBracket) {
		return nil, false
	}
	return o.TaxBracket, true
}

// HasTaxBracket returns a boolean if a field has been set.
func (o *InvestmentProfile) HasTaxBracket() bool {
	if o != nil && !IsNil(o.TaxBracket) {
		return true
	}

	return false
}

// SetTaxBracket gets a reference to the given TaxBracket and assigns it to the TaxBracket field.
func (o *InvestmentProfile) SetTaxBracket(v TaxBracket) {
	o.TaxBracket = &v
}

// GetTimeHorizon returns the TimeHorizon field value if set, zero value otherwise.
func (o *InvestmentProfile) GetTimeHorizon() TimeHorizon {
	if o == nil || IsNil(o.TimeHorizon) {
		var ret TimeHorizon
		return ret
	}
	return *o.TimeHorizon
}

// GetTimeHorizonOk returns a tuple with the TimeHorizon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetTimeHorizonOk() (*TimeHorizon, bool) {
	if o == nil || IsNil(o.TimeHorizon) {
		return nil, false
	}
	return o.TimeHorizon, true
}

// HasTimeHorizon returns a boolean if a field has been set.
func (o *InvestmentProfile) HasTimeHorizon() bool {
	if o != nil && !IsNil(o.TimeHorizon) {
		return true
	}

	return false
}

// SetTimeHorizon gets a reference to the given TimeHorizon and assigns it to the TimeHorizon field.
func (o *InvestmentProfile) SetTimeHorizon(v TimeHorizon) {
	o.TimeHorizon = &v
}

// GetTotalNetWorth returns the TotalNetWorth field value if set, zero value otherwise.
func (o *InvestmentProfile) GetTotalNetWorth() TotalNetWorth {
	if o == nil || IsNil(o.TotalNetWorth) {
		var ret TotalNetWorth
		return ret
	}
	return *o.TotalNetWorth
}

// GetTotalNetWorthOk returns a tuple with the TotalNetWorth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetTotalNetWorthOk() (*TotalNetWorth, bool) {
	if o == nil || IsNil(o.TotalNetWorth) {
		return nil, false
	}
	return o.TotalNetWorth, true
}

// HasTotalNetWorth returns a boolean if a field has been set.
func (o *InvestmentProfile) HasTotalNetWorth() bool {
	if o != nil && !IsNil(o.TotalNetWorth) {
		return true
	}

	return false
}

// SetTotalNetWorth gets a reference to the given TotalNetWorth and assigns it to the TotalNetWorth field.
func (o *InvestmentProfile) SetTotalNetWorth(v TotalNetWorth) {
	o.TotalNetWorth = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *InvestmentProfile) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *InvestmentProfile) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *InvestmentProfile) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *InvestmentProfile) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentProfile) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *InvestmentProfile) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *InvestmentProfile) SetUser(v string) {
	o.User = &v
}

func (o InvestmentProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvestmentProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnnualIncome) {
		toSerialize["annual_income"] = o.AnnualIncome
	}
	if !IsNil(o.InvestmentExperience) {
		toSerialize["investment_experience"] = o.InvestmentExperience
	}
	if !IsNil(o.InvestmentObjective) {
		toSerialize["investment_objective"] = o.InvestmentObjective
	}
	if !IsNil(o.LiquidNetWorth) {
		toSerialize["liquid_net_worth"] = o.LiquidNetWorth
	}
	if !IsNil(o.LiquidityNeeds) {
		toSerialize["liquidity_needs"] = o.LiquidityNeeds
	}
	if !IsNil(o.RiskTolerance) {
		toSerialize["risk_tolerance"] = o.RiskTolerance
	}
	if !IsNil(o.SourceOfFunds) {
		toSerialize["source_of_funds"] = o.SourceOfFunds
	}
	if !IsNil(o.SuitabilityVerified) {
		toSerialize["suitability_verified"] = o.SuitabilityVerified
	}
	if !IsNil(o.TaxBracket) {
		toSerialize["tax_bracket"] = o.TaxBracket
	}
	if !IsNil(o.TimeHorizon) {
		toSerialize["time_horizon"] = o.TimeHorizon
	}
	if !IsNil(o.TotalNetWorth) {
		toSerialize["total_net_worth"] = o.TotalNetWorth
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableInvestmentProfile struct {
	value *InvestmentProfile
	isSet bool
}

func (v NullableInvestmentProfile) Get() *InvestmentProfile {
	return v.value
}

func (v *NullableInvestmentProfile) Set(val *InvestmentProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestmentProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestmentProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestmentProfile(val *InvestmentProfile) *NullableInvestmentProfile {
	return &NullableInvestmentProfile{value: val, isSet: true}
}

func (v NullableInvestmentProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestmentProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


