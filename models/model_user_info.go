/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInfo{}

// UserInfo struct for UserInfo
type UserInfo struct {
	AdditionalInfo *string `json:"additional_info,omitempty"`
	BasicInfo *string `json:"basic_info,omitempty"`
	Email *string `json:"email,omitempty"`
	Employment *string `json:"employment,omitempty"`
	FirstName *string `json:"first_name,omitempty"`
	Id *string `json:"id,omitempty"`
	IdInfo *string `json:"id_info,omitempty"`
	InternationalInfo *string `json:"international_info,omitempty"`
	InvestmentProfile *string `json:"investment_profile,omitempty"`
	LastName *string `json:"last_name,omitempty"`
	Url *string `json:"url,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewUserInfo instantiates a new UserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInfo() *UserInfo {
	this := UserInfo{}
	return &this
}

// NewUserInfoWithDefaults instantiates a new UserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInfoWithDefaults() *UserInfo {
	this := UserInfo{}
	return &this
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *UserInfo) GetAdditionalInfo() string {
	if o == nil || IsNil(o.AdditionalInfo) {
		var ret string
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetAdditionalInfoOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInfo) {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *UserInfo) HasAdditionalInfo() bool {
	if o != nil && !IsNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given string and assigns it to the AdditionalInfo field.
func (o *UserInfo) SetAdditionalInfo(v string) {
	o.AdditionalInfo = &v
}

// GetBasicInfo returns the BasicInfo field value if set, zero value otherwise.
func (o *UserInfo) GetBasicInfo() string {
	if o == nil || IsNil(o.BasicInfo) {
		var ret string
		return ret
	}
	return *o.BasicInfo
}

// GetBasicInfoOk returns a tuple with the BasicInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetBasicInfoOk() (*string, bool) {
	if o == nil || IsNil(o.BasicInfo) {
		return nil, false
	}
	return o.BasicInfo, true
}

// HasBasicInfo returns a boolean if a field has been set.
func (o *UserInfo) HasBasicInfo() bool {
	if o != nil && !IsNil(o.BasicInfo) {
		return true
	}

	return false
}

// SetBasicInfo gets a reference to the given string and assigns it to the BasicInfo field.
func (o *UserInfo) SetBasicInfo(v string) {
	o.BasicInfo = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserInfo) SetEmail(v string) {
	o.Email = &v
}

// GetEmployment returns the Employment field value if set, zero value otherwise.
func (o *UserInfo) GetEmployment() string {
	if o == nil || IsNil(o.Employment) {
		var ret string
		return ret
	}
	return *o.Employment
}

// GetEmploymentOk returns a tuple with the Employment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetEmploymentOk() (*string, bool) {
	if o == nil || IsNil(o.Employment) {
		return nil, false
	}
	return o.Employment, true
}

// HasEmployment returns a boolean if a field has been set.
func (o *UserInfo) HasEmployment() bool {
	if o != nil && !IsNil(o.Employment) {
		return true
	}

	return false
}

// SetEmployment gets a reference to the given string and assigns it to the Employment field.
func (o *UserInfo) SetEmployment(v string) {
	o.Employment = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserInfo) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserInfo) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserInfo) SetFirstName(v string) {
	o.FirstName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserInfo) SetId(v string) {
	o.Id = &v
}

// GetIdInfo returns the IdInfo field value if set, zero value otherwise.
func (o *UserInfo) GetIdInfo() string {
	if o == nil || IsNil(o.IdInfo) {
		var ret string
		return ret
	}
	return *o.IdInfo
}

// GetIdInfoOk returns a tuple with the IdInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetIdInfoOk() (*string, bool) {
	if o == nil || IsNil(o.IdInfo) {
		return nil, false
	}
	return o.IdInfo, true
}

// HasIdInfo returns a boolean if a field has been set.
func (o *UserInfo) HasIdInfo() bool {
	if o != nil && !IsNil(o.IdInfo) {
		return true
	}

	return false
}

// SetIdInfo gets a reference to the given string and assigns it to the IdInfo field.
func (o *UserInfo) SetIdInfo(v string) {
	o.IdInfo = &v
}

// GetInternationalInfo returns the InternationalInfo field value if set, zero value otherwise.
func (o *UserInfo) GetInternationalInfo() string {
	if o == nil || IsNil(o.InternationalInfo) {
		var ret string
		return ret
	}
	return *o.InternationalInfo
}

// GetInternationalInfoOk returns a tuple with the InternationalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetInternationalInfoOk() (*string, bool) {
	if o == nil || IsNil(o.InternationalInfo) {
		return nil, false
	}
	return o.InternationalInfo, true
}

// HasInternationalInfo returns a boolean if a field has been set.
func (o *UserInfo) HasInternationalInfo() bool {
	if o != nil && !IsNil(o.InternationalInfo) {
		return true
	}

	return false
}

// SetInternationalInfo gets a reference to the given string and assigns it to the InternationalInfo field.
func (o *UserInfo) SetInternationalInfo(v string) {
	o.InternationalInfo = &v
}

// GetInvestmentProfile returns the InvestmentProfile field value if set, zero value otherwise.
func (o *UserInfo) GetInvestmentProfile() string {
	if o == nil || IsNil(o.InvestmentProfile) {
		var ret string
		return ret
	}
	return *o.InvestmentProfile
}

// GetInvestmentProfileOk returns a tuple with the InvestmentProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetInvestmentProfileOk() (*string, bool) {
	if o == nil || IsNil(o.InvestmentProfile) {
		return nil, false
	}
	return o.InvestmentProfile, true
}

// HasInvestmentProfile returns a boolean if a field has been set.
func (o *UserInfo) HasInvestmentProfile() bool {
	if o != nil && !IsNil(o.InvestmentProfile) {
		return true
	}

	return false
}

// SetInvestmentProfile gets a reference to the given string and assigns it to the InvestmentProfile field.
func (o *UserInfo) SetInvestmentProfile(v string) {
	o.InvestmentProfile = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UserInfo) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UserInfo) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UserInfo) SetLastName(v string) {
	o.LastName = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UserInfo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UserInfo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UserInfo) SetUrl(v string) {
	o.Url = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserInfo) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfo) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserInfo) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserInfo) SetUsername(v string) {
	o.Username = &v
}

func (o UserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalInfo) {
		toSerialize["additional_info"] = o.AdditionalInfo
	}
	if !IsNil(o.BasicInfo) {
		toSerialize["basic_info"] = o.BasicInfo
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Employment) {
		toSerialize["employment"] = o.Employment
	}
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdInfo) {
		toSerialize["id_info"] = o.IdInfo
	}
	if !IsNil(o.InternationalInfo) {
		toSerialize["international_info"] = o.InternationalInfo
	}
	if !IsNil(o.InvestmentProfile) {
		toSerialize["investment_profile"] = o.InvestmentProfile
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableUserInfo struct {
	value *UserInfo
	isSet bool
}

func (v NullableUserInfo) Get() *UserInfo {
	return v.value
}

func (v *NullableUserInfo) Set(val *UserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInfo(val *UserInfo) *NullableUserInfo {
	return &NullableUserInfo{value: val, isSet: true}
}

func (v NullableUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


