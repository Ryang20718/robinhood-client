/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Order type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Order{}

// Order struct for Order
type Order struct {
	Account *string `json:"account,omitempty"`
	Action *OrderAction `json:"action,omitempty"`
	AveragePrice *string `json:"average_price,omitempty"`
	CancelUrl *string `json:"cancel_url,omitempty"`
	ClientId *string `json:"client_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	CumulativeQuantity *string `json:"cumulative_quantity,omitempty"`
	// DollarBasedAmount *string `json:"dollar_based_amount,omitempty"`
	Executions []Execution `json:"executions,omitempty"`
	TotalNotional *OrderTotalNotional `json:"total_notional,omitempty"`
	ExecutedNotional *OrderTotalNotional `json:"executed_notional,omitempty"`
	ExtendedHours *bool `json:"extended_hours,omitempty"`
	Fees *string `json:"fees,omitempty"`
	Id *string `json:"id,omitempty"`
	InvestmentScheduleId *string `json:"investment_schedule_id,omitempty"`
	Instrument *string `json:"instrument,omitempty"`
	LastTrailPrice *string `json:"last_trail_price,omitempty"`
	LastTrailPriceUpdatedAt *string `json:"last_trail_price_updated_at,omitempty"`
	LastTransactionAt *string `json:"last_transaction_at,omitempty"`
	OverrideDayTradeChecks *bool `json:"override_day_trade_checks,omitempty"`
	OverrideDtbpChecks *bool `json:"override_dtbp_checks,omitempty"`
	Position *string `json:"position,omitempty"`
	Price *string `json:"price,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
	RefId *string `json:"ref_id,omitempty"`
	RejectReason *string `json:"reject_reason,omitempty"`
	Side *Side `json:"side,omitempty"`
	State *OrderState `json:"state,omitempty"`
	StopPrice *string `json:"stop_price,omitempty"`
	StopTriggeredAt *string `json:"stop_triggered_at,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	TimeInForce *TimeInForce `json:"time_in_force,omitempty"`
	Trigger *Trigger `json:"trigger,omitempty"`
	Type *ExecutionType `json:"type,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Url *string `json:"url,omitempty"`
}
// STart of manually added

type Transaction struct {
	Ticker          string
	TransactionType string // Buy. Sell
	Qty             float64
	UnitCost        float64
	CreatedAt       string
	Tag             string
}

// END

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder() *Order {
	this := Order{}
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Order) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Order) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *Order) SetAccount(v string) {
	o.Account = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *Order) GetAction() OrderAction {
	if o == nil || IsNil(o.Action) {
		var ret OrderAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetActionOk() (*OrderAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Order) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given OrderAction and assigns it to the Action field.
func (o *Order) SetAction(v OrderAction) {
	o.Action = &v
}

// GetAveragePrice returns the AveragePrice field value if set, zero value otherwise.
func (o *Order) GetAveragePrice() string {
	if o == nil || IsNil(o.AveragePrice) {
		var ret string
		return ret
	}
	return *o.AveragePrice
}

// GetAveragePriceOk returns a tuple with the AveragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetAveragePriceOk() (*string, bool) {
	if o == nil || IsNil(o.AveragePrice) {
		return nil, false
	}
	return o.AveragePrice, true
}

// HasAveragePrice returns a boolean if a field has been set.
func (o *Order) HasAveragePrice() bool {
	if o != nil && !IsNil(o.AveragePrice) {
		return true
	}

	return false
}

// SetAveragePrice gets a reference to the given string and assigns it to the AveragePrice field.
func (o *Order) SetAveragePrice(v string) {
	o.AveragePrice = &v
}

// GetCancelUrl returns the CancelUrl field value if set, zero value otherwise.
func (o *Order) GetCancelUrl() string {
	if o == nil || IsNil(o.CancelUrl) {
		var ret string
		return ret
	}
	return *o.CancelUrl
}

// GetCancelUrlOk returns a tuple with the CancelUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCancelUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CancelUrl) {
		return nil, false
	}
	return o.CancelUrl, true
}

// HasCancelUrl returns a boolean if a field has been set.
func (o *Order) HasCancelUrl() bool {
	if o != nil && !IsNil(o.CancelUrl) {
		return true
	}

	return false
}

// SetCancelUrl gets a reference to the given string and assigns it to the CancelUrl field.
func (o *Order) SetCancelUrl(v string) {
	o.CancelUrl = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *Order) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *Order) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *Order) SetClientId(v string) {
	o.ClientId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Order) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Order) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Order) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCumulativeQuantity returns the CumulativeQuantity field value if set, zero value otherwise.
func (o *Order) GetCumulativeQuantity() string {
	if o == nil || IsNil(o.CumulativeQuantity) {
		var ret string
		return ret
	}
	return *o.CumulativeQuantity
}

// GetCumulativeQuantityOk returns a tuple with the CumulativeQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCumulativeQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.CumulativeQuantity) {
		return nil, false
	}
	return o.CumulativeQuantity, true
}

// HasCumulativeQuantity returns a boolean if a field has been set.
func (o *Order) HasCumulativeQuantity() bool {
	if o != nil && !IsNil(o.CumulativeQuantity) {
		return true
	}

	return false
}

// SetCumulativeQuantity gets a reference to the given string and assigns it to the CumulativeQuantity field.
func (o *Order) SetCumulativeQuantity(v string) {
	o.CumulativeQuantity = &v
}

// // GetDollarBasedAmount returns the DollarBasedAmount field value if set, zero value otherwise.
// func (o *Order) GetDollarBasedAmount() string {
// 	if o == nil || IsNil(o.DollarBasedAmount) {
// 		var ret string
// 		return ret
// 	}
// 	return *o.DollarBasedAmount
// }

// // GetDollarBasedAmountOk returns a tuple with the DollarBasedAmount field value if set, nil otherwise
// // and a boolean to check if the value has been set.
// func (o *Order) GetDollarBasedAmountOk() (*string, bool) {
// 	if o == nil || IsNil(o.DollarBasedAmount) {
// 		return nil, false
// 	}
// 	return o.DollarBasedAmount, true
// }

// // HasDollarBasedAmount returns a boolean if a field has been set.
// func (o *Order) HasDollarBasedAmount() bool {
// 	if o != nil && !IsNil(o.DollarBasedAmount) {
// 		return true
// 	}

// 	return false
// }

// // SetDollarBasedAmount gets a reference to the given string and assigns it to the DollarBasedAmount field.
// func (o *Order) SetDollarBasedAmount(v string) {
// 	o.DollarBasedAmount = &v
// }

// GetExecutions returns the Executions field value if set, zero value otherwise.
func (o *Order) GetExecutions() []Execution {
	if o == nil || IsNil(o.Executions) {
		var ret []Execution
		return ret
	}
	return o.Executions
}

// GetExecutionsOk returns a tuple with the Executions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExecutionsOk() ([]Execution, bool) {
	if o == nil || IsNil(o.Executions) {
		return nil, false
	}
	return o.Executions, true
}

// HasExecutions returns a boolean if a field has been set.
func (o *Order) HasExecutions() bool {
	if o != nil && !IsNil(o.Executions) {
		return true
	}

	return false
}

// SetExecutions gets a reference to the given []Execution and assigns it to the Executions field.
func (o *Order) SetExecutions(v []Execution) {
	o.Executions = v
}

// GetTotalNotional returns the TotalNotional field value if set, zero value otherwise.
func (o *Order) GetTotalNotional() OrderTotalNotional {
	if o == nil || IsNil(o.TotalNotional) {
		var ret OrderTotalNotional
		return ret
	}
	return *o.TotalNotional
}

// GetTotalNotionalOk returns a tuple with the TotalNotional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTotalNotionalOk() (*OrderTotalNotional, bool) {
	if o == nil || IsNil(o.TotalNotional) {
		return nil, false
	}
	return o.TotalNotional, true
}

// HasTotalNotional returns a boolean if a field has been set.
func (o *Order) HasTotalNotional() bool {
	if o != nil && !IsNil(o.TotalNotional) {
		return true
	}

	return false
}

// SetTotalNotional gets a reference to the given OrderTotalNotional and assigns it to the TotalNotional field.
func (o *Order) SetTotalNotional(v OrderTotalNotional) {
	o.TotalNotional = &v
}

// GetExecutedNotional returns the ExecutedNotional field value if set, zero value otherwise.
func (o *Order) GetExecutedNotional() OrderTotalNotional {
	if o == nil || IsNil(o.ExecutedNotional) {
		var ret OrderTotalNotional
		return ret
	}
	return *o.ExecutedNotional
}

// GetExecutedNotionalOk returns a tuple with the ExecutedNotional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExecutedNotionalOk() (*OrderTotalNotional, bool) {
	if o == nil || IsNil(o.ExecutedNotional) {
		return nil, false
	}
	return o.ExecutedNotional, true
}

// HasExecutedNotional returns a boolean if a field has been set.
func (o *Order) HasExecutedNotional() bool {
	if o != nil && !IsNil(o.ExecutedNotional) {
		return true
	}

	return false
}

// SetExecutedNotional gets a reference to the given OrderTotalNotional and assigns it to the ExecutedNotional field.
func (o *Order) SetExecutedNotional(v OrderTotalNotional) {
	o.ExecutedNotional = &v
}

// GetExtendedHours returns the ExtendedHours field value if set, zero value otherwise.
func (o *Order) GetExtendedHours() bool {
	if o == nil || IsNil(o.ExtendedHours) {
		var ret bool
		return ret
	}
	return *o.ExtendedHours
}

// GetExtendedHoursOk returns a tuple with the ExtendedHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExtendedHoursOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtendedHours) {
		return nil, false
	}
	return o.ExtendedHours, true
}

// HasExtendedHours returns a boolean if a field has been set.
func (o *Order) HasExtendedHours() bool {
	if o != nil && !IsNil(o.ExtendedHours) {
		return true
	}

	return false
}

// SetExtendedHours gets a reference to the given bool and assigns it to the ExtendedHours field.
func (o *Order) SetExtendedHours(v bool) {
	o.ExtendedHours = &v
}

// GetFees returns the Fees field value if set, zero value otherwise.
func (o *Order) GetFees() string {
	if o == nil || IsNil(o.Fees) {
		var ret string
		return ret
	}
	return *o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetFeesOk() (*string, bool) {
	if o == nil || IsNil(o.Fees) {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *Order) HasFees() bool {
	if o != nil && !IsNil(o.Fees) {
		return true
	}

	return false
}

// SetFees gets a reference to the given string and assigns it to the Fees field.
func (o *Order) SetFees(v string) {
	o.Fees = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Order) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Order) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Order) SetId(v string) {
	o.Id = &v
}

// GetInvestmentScheduleId returns the InvestmentScheduleId field value if set, zero value otherwise.
func (o *Order) GetInvestmentScheduleId() string {
	if o == nil || IsNil(o.InvestmentScheduleId) {
		var ret string
		return ret
	}
	return *o.InvestmentScheduleId
}

// GetInvestmentScheduleIdOk returns a tuple with the InvestmentScheduleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetInvestmentScheduleIdOk() (*string, bool) {
	if o == nil || IsNil(o.InvestmentScheduleId) {
		return nil, false
	}
	return o.InvestmentScheduleId, true
}

// HasInvestmentScheduleId returns a boolean if a field has been set.
func (o *Order) HasInvestmentScheduleId() bool {
	if o != nil && !IsNil(o.InvestmentScheduleId) {
		return true
	}

	return false
}

// SetInvestmentScheduleId gets a reference to the given string and assigns it to the InvestmentScheduleId field.
func (o *Order) SetInvestmentScheduleId(v string) {
	o.InvestmentScheduleId = &v
}

// GetInstrument returns the Instrument field value if set, zero value otherwise.
func (o *Order) GetInstrument() string {
	if o == nil || IsNil(o.Instrument) {
		var ret string
		return ret
	}
	return *o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetInstrumentOk() (*string, bool) {
	if o == nil || IsNil(o.Instrument) {
		return nil, false
	}
	return o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *Order) HasInstrument() bool {
	if o != nil && !IsNil(o.Instrument) {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given string and assigns it to the Instrument field.
func (o *Order) SetInstrument(v string) {
	o.Instrument = &v
}

// GetLastTrailPrice returns the LastTrailPrice field value if set, zero value otherwise.
func (o *Order) GetLastTrailPrice() string {
	if o == nil || IsNil(o.LastTrailPrice) {
		var ret string
		return ret
	}
	return *o.LastTrailPrice
}

// GetLastTrailPriceOk returns a tuple with the LastTrailPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetLastTrailPriceOk() (*string, bool) {
	if o == nil || IsNil(o.LastTrailPrice) {
		return nil, false
	}
	return o.LastTrailPrice, true
}

// HasLastTrailPrice returns a boolean if a field has been set.
func (o *Order) HasLastTrailPrice() bool {
	if o != nil && !IsNil(o.LastTrailPrice) {
		return true
	}

	return false
}

// SetLastTrailPrice gets a reference to the given string and assigns it to the LastTrailPrice field.
func (o *Order) SetLastTrailPrice(v string) {
	o.LastTrailPrice = &v
}

// GetLastTrailPriceUpdatedAt returns the LastTrailPriceUpdatedAt field value if set, zero value otherwise.
func (o *Order) GetLastTrailPriceUpdatedAt() string {
	if o == nil || IsNil(o.LastTrailPriceUpdatedAt) {
		var ret string
		return ret
	}
	return *o.LastTrailPriceUpdatedAt
}

// GetLastTrailPriceUpdatedAtOk returns a tuple with the LastTrailPriceUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetLastTrailPriceUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.LastTrailPriceUpdatedAt) {
		return nil, false
	}
	return o.LastTrailPriceUpdatedAt, true
}

// HasLastTrailPriceUpdatedAt returns a boolean if a field has been set.
func (o *Order) HasLastTrailPriceUpdatedAt() bool {
	if o != nil && !IsNil(o.LastTrailPriceUpdatedAt) {
		return true
	}

	return false
}

// SetLastTrailPriceUpdatedAt gets a reference to the given string and assigns it to the LastTrailPriceUpdatedAt field.
func (o *Order) SetLastTrailPriceUpdatedAt(v string) {
	o.LastTrailPriceUpdatedAt = &v
}

// GetLastTransactionAt returns the LastTransactionAt field value if set, zero value otherwise.
func (o *Order) GetLastTransactionAt() string {
	if o == nil || IsNil(o.LastTransactionAt) {
		var ret string
		return ret
	}
	return *o.LastTransactionAt
}

// GetLastTransactionAtOk returns a tuple with the LastTransactionAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetLastTransactionAtOk() (*string, bool) {
	if o == nil || IsNil(o.LastTransactionAt) {
		return nil, false
	}
	return o.LastTransactionAt, true
}

// HasLastTransactionAt returns a boolean if a field has been set.
func (o *Order) HasLastTransactionAt() bool {
	if o != nil && !IsNil(o.LastTransactionAt) {
		return true
	}

	return false
}

// SetLastTransactionAt gets a reference to the given string and assigns it to the LastTransactionAt field.
func (o *Order) SetLastTransactionAt(v string) {
	o.LastTransactionAt = &v
}

// GetOverrideDayTradeChecks returns the OverrideDayTradeChecks field value if set, zero value otherwise.
func (o *Order) GetOverrideDayTradeChecks() bool {
	if o == nil || IsNil(o.OverrideDayTradeChecks) {
		var ret bool
		return ret
	}
	return *o.OverrideDayTradeChecks
}

// GetOverrideDayTradeChecksOk returns a tuple with the OverrideDayTradeChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOverrideDayTradeChecksOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideDayTradeChecks) {
		return nil, false
	}
	return o.OverrideDayTradeChecks, true
}

// HasOverrideDayTradeChecks returns a boolean if a field has been set.
func (o *Order) HasOverrideDayTradeChecks() bool {
	if o != nil && !IsNil(o.OverrideDayTradeChecks) {
		return true
	}

	return false
}

// SetOverrideDayTradeChecks gets a reference to the given bool and assigns it to the OverrideDayTradeChecks field.
func (o *Order) SetOverrideDayTradeChecks(v bool) {
	o.OverrideDayTradeChecks = &v
}

// GetOverrideDtbpChecks returns the OverrideDtbpChecks field value if set, zero value otherwise.
func (o *Order) GetOverrideDtbpChecks() bool {
	if o == nil || IsNil(o.OverrideDtbpChecks) {
		var ret bool
		return ret
	}
	return *o.OverrideDtbpChecks
}

// GetOverrideDtbpChecksOk returns a tuple with the OverrideDtbpChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOverrideDtbpChecksOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideDtbpChecks) {
		return nil, false
	}
	return o.OverrideDtbpChecks, true
}

// HasOverrideDtbpChecks returns a boolean if a field has been set.
func (o *Order) HasOverrideDtbpChecks() bool {
	if o != nil && !IsNil(o.OverrideDtbpChecks) {
		return true
	}

	return false
}

// SetOverrideDtbpChecks gets a reference to the given bool and assigns it to the OverrideDtbpChecks field.
func (o *Order) SetOverrideDtbpChecks(v bool) {
	o.OverrideDtbpChecks = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *Order) GetPosition() string {
	if o == nil || IsNil(o.Position) {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPositionOk() (*string, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *Order) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *Order) SetPosition(v string) {
	o.Position = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Order) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Order) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *Order) SetPrice(v string) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Order) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Order) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *Order) SetQuantity(v string) {
	o.Quantity = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *Order) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *Order) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *Order) SetRefId(v string) {
	o.RefId = &v
}

// GetRejectReason returns the RejectReason field value if set, zero value otherwise.
func (o *Order) GetRejectReason() string {
	if o == nil || IsNil(o.RejectReason) {
		var ret string
		return ret
	}
	return *o.RejectReason
}

// GetRejectReasonOk returns a tuple with the RejectReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetRejectReasonOk() (*string, bool) {
	if o == nil || IsNil(o.RejectReason) {
		return nil, false
	}
	return o.RejectReason, true
}

// HasRejectReason returns a boolean if a field has been set.
func (o *Order) HasRejectReason() bool {
	if o != nil && !IsNil(o.RejectReason) {
		return true
	}

	return false
}

// SetRejectReason gets a reference to the given string and assigns it to the RejectReason field.
func (o *Order) SetRejectReason(v string) {
	o.RejectReason = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *Order) GetSide() Side {
	if o == nil || IsNil(o.Side) {
		var ret Side
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSideOk() (*Side, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *Order) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given Side and assigns it to the Side field.
func (o *Order) SetSide(v Side) {
	o.Side = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Order) GetState() OrderState {
	if o == nil || IsNil(o.State) {
		var ret OrderState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStateOk() (*OrderState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Order) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given OrderState and assigns it to the State field.
func (o *Order) SetState(v OrderState) {
	o.State = &v
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise.
func (o *Order) GetStopPrice() string {
	if o == nil || IsNil(o.StopPrice) {
		var ret string
		return ret
	}
	return *o.StopPrice
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStopPriceOk() (*string, bool) {
	if o == nil || IsNil(o.StopPrice) {
		return nil, false
	}
	return o.StopPrice, true
}

// HasStopPrice returns a boolean if a field has been set.
func (o *Order) HasStopPrice() bool {
	if o != nil && !IsNil(o.StopPrice) {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given string and assigns it to the StopPrice field.
func (o *Order) SetStopPrice(v string) {
	o.StopPrice = &v
}

// GetStopTriggeredAt returns the StopTriggeredAt field value if set, zero value otherwise.
func (o *Order) GetStopTriggeredAt() string {
	if o == nil || IsNil(o.StopTriggeredAt) {
		var ret string
		return ret
	}
	return *o.StopTriggeredAt
}

// GetStopTriggeredAtOk returns a tuple with the StopTriggeredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetStopTriggeredAtOk() (*string, bool) {
	if o == nil || IsNil(o.StopTriggeredAt) {
		return nil, false
	}
	return o.StopTriggeredAt, true
}

// HasStopTriggeredAt returns a boolean if a field has been set.
func (o *Order) HasStopTriggeredAt() bool {
	if o != nil && !IsNil(o.StopTriggeredAt) {
		return true
	}

	return false
}

// SetStopTriggeredAt gets a reference to the given string and assigns it to the StopTriggeredAt field.
func (o *Order) SetStopTriggeredAt(v string) {
	o.StopTriggeredAt = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Order) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Order) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Order) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *Order) GetTimeInForce() TimeInForce {
	if o == nil || IsNil(o.TimeInForce) {
		var ret TimeInForce
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTimeInForceOk() (*TimeInForce, bool) {
	if o == nil || IsNil(o.TimeInForce) {
		return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *Order) HasTimeInForce() bool {
	if o != nil && !IsNil(o.TimeInForce) {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given TimeInForce and assigns it to the TimeInForce field.
func (o *Order) SetTimeInForce(v TimeInForce) {
	o.TimeInForce = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *Order) GetTrigger() Trigger {
	if o == nil || IsNil(o.Trigger) {
		var ret Trigger
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTriggerOk() (*Trigger, bool) {
	if o == nil || IsNil(o.Trigger) {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *Order) HasTrigger() bool {
	if o != nil && !IsNil(o.Trigger) {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given Trigger and assigns it to the Trigger field.
func (o *Order) SetTrigger(v Trigger) {
	o.Trigger = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Order) GetType() ExecutionType {
	if o == nil || IsNil(o.Type) {
		var ret ExecutionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTypeOk() (*ExecutionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Order) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ExecutionType and assigns it to the Type field.
func (o *Order) SetType(v ExecutionType) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Order) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Order) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Order) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Order) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Order) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Order) SetUrl(v string) {
	o.Url = &v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Order) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.AveragePrice) {
		toSerialize["average_price"] = o.AveragePrice
	}
	if !IsNil(o.CancelUrl) {
		toSerialize["cancel_url"] = o.CancelUrl
	}
	if !IsNil(o.ClientId) {
		toSerialize["client_id"] = o.ClientId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CumulativeQuantity) {
		toSerialize["cumulative_quantity"] = o.CumulativeQuantity
	}
	// if !IsNil(o.DollarBasedAmount) {
	// 	toSerialize["dollar_based_amount"] = o.DollarBasedAmount
	// }
	if !IsNil(o.Executions) {
		toSerialize["executions"] = o.Executions
	}
	if !IsNil(o.TotalNotional) {
		toSerialize["total_notional"] = o.TotalNotional
	}
	if !IsNil(o.ExecutedNotional) {
		toSerialize["executed_notional"] = o.ExecutedNotional
	}
	if !IsNil(o.ExtendedHours) {
		toSerialize["extended_hours"] = o.ExtendedHours
	}
	if !IsNil(o.Fees) {
		toSerialize["fees"] = o.Fees
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InvestmentScheduleId) {
		toSerialize["investment_schedule_id"] = o.InvestmentScheduleId
	}
	if !IsNil(o.Instrument) {
		toSerialize["instrument"] = o.Instrument
	}
	if !IsNil(o.LastTrailPrice) {
		toSerialize["last_trail_price"] = o.LastTrailPrice
	}
	if !IsNil(o.LastTrailPriceUpdatedAt) {
		toSerialize["last_trail_price_updated_at"] = o.LastTrailPriceUpdatedAt
	}
	if !IsNil(o.LastTransactionAt) {
		toSerialize["last_transaction_at"] = o.LastTransactionAt
	}
	if !IsNil(o.OverrideDayTradeChecks) {
		toSerialize["override_day_trade_checks"] = o.OverrideDayTradeChecks
	}
	if !IsNil(o.OverrideDtbpChecks) {
		toSerialize["override_dtbp_checks"] = o.OverrideDtbpChecks
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.RefId) {
		toSerialize["ref_id"] = o.RefId
	}
	if !IsNil(o.RejectReason) {
		toSerialize["reject_reason"] = o.RejectReason
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.StopPrice) {
		toSerialize["stop_price"] = o.StopPrice
	}
	if !IsNil(o.StopTriggeredAt) {
		toSerialize["stop_triggered_at"] = o.StopTriggeredAt
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.TimeInForce) {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if !IsNil(o.Trigger) {
		toSerialize["trigger"] = o.Trigger
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


