/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SourceOfFunds the model 'SourceOfFunds'
type SourceOfFunds string

// List of SourceOfFunds
const (
	SAVINGS_PERSONAL_INCOME SourceOfFunds = "savings_personal_income"
	PENSION_RETIREMENT SourceOfFunds = "pension_retirement"
	INSURANCE_PAYOUT SourceOfFunds = "insurance_payout"
	INHERITANCE SourceOfFunds = "inheritance"
	GIFT SourceOfFunds = "gift"
	SALE_BUSINESS_OR_PROPERTY SourceOfFunds = "sale_business_or_property"
	OTHER SourceOfFunds = "other"
)

// All allowed values of SourceOfFunds enum
var AllowedSourceOfFundsEnumValues = []SourceOfFunds{
	"savings_personal_income",
	"pension_retirement",
	"insurance_payout",
	"inheritance",
	"gift",
	"sale_business_or_property",
	"other",
}

func (v *SourceOfFunds) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SourceOfFunds(value)
	for _, existing := range AllowedSourceOfFundsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SourceOfFunds", value)
}

// NewSourceOfFundsFromValue returns a pointer to a valid SourceOfFunds
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSourceOfFundsFromValue(v string) (*SourceOfFunds, error) {
	ev := SourceOfFunds(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SourceOfFunds: valid values are %v", v, AllowedSourceOfFundsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SourceOfFunds) IsValid() bool {
	for _, existing := range AllowedSourceOfFundsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SourceOfFunds value
func (v SourceOfFunds) Ptr() *SourceOfFunds {
	return &v
}

type NullableSourceOfFunds struct {
	value *SourceOfFunds
	isSet bool
}

func (v NullableSourceOfFunds) Get() *SourceOfFunds {
	return v.value
}

func (v *NullableSourceOfFunds) Set(val *SourceOfFunds) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceOfFunds) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceOfFunds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceOfFunds(val *SourceOfFunds) *NullableSourceOfFunds {
	return &NullableSourceOfFunds{value: val, isSet: true}
}

func (v NullableSourceOfFunds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceOfFunds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

