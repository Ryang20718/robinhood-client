/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Auth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Auth{}

// Auth struct for Auth
type Auth struct {
	MfaRequired *string `json:"mfa_required,omitempty"`
	MfaType *string `json:"mfa_type,omitempty"`
	Token *string `json:"token,omitempty"`
}

// NewAuth instantiates a new Auth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuth() *Auth {
	this := Auth{}
	return &this
}

// NewAuthWithDefaults instantiates a new Auth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthWithDefaults() *Auth {
	this := Auth{}
	return &this
}

// GetMfaRequired returns the MfaRequired field value if set, zero value otherwise.
func (o *Auth) GetMfaRequired() string {
	if o == nil || IsNil(o.MfaRequired) {
		var ret string
		return ret
	}
	return *o.MfaRequired
}

// GetMfaRequiredOk returns a tuple with the MfaRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth) GetMfaRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.MfaRequired) {
		return nil, false
	}
	return o.MfaRequired, true
}

// HasMfaRequired returns a boolean if a field has been set.
func (o *Auth) HasMfaRequired() bool {
	if o != nil && !IsNil(o.MfaRequired) {
		return true
	}

	return false
}

// SetMfaRequired gets a reference to the given string and assigns it to the MfaRequired field.
func (o *Auth) SetMfaRequired(v string) {
	o.MfaRequired = &v
}

// GetMfaType returns the MfaType field value if set, zero value otherwise.
func (o *Auth) GetMfaType() string {
	if o == nil || IsNil(o.MfaType) {
		var ret string
		return ret
	}
	return *o.MfaType
}

// GetMfaTypeOk returns a tuple with the MfaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth) GetMfaTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MfaType) {
		return nil, false
	}
	return o.MfaType, true
}

// HasMfaType returns a boolean if a field has been set.
func (o *Auth) HasMfaType() bool {
	if o != nil && !IsNil(o.MfaType) {
		return true
	}

	return false
}

// SetMfaType gets a reference to the given string and assigns it to the MfaType field.
func (o *Auth) SetMfaType(v string) {
	o.MfaType = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *Auth) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Auth) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *Auth) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *Auth) SetToken(v string) {
	o.Token = &v
}

func (o Auth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Auth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MfaRequired) {
		toSerialize["mfa_required"] = o.MfaRequired
	}
	if !IsNil(o.MfaType) {
		toSerialize["mfa_type"] = o.MfaType
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableAuth struct {
	value *Auth
	isSet bool
}

func (v NullableAuth) Get() *Auth {
	return v.value
}

func (v *NullableAuth) Set(val *Auth) {
	v.value = val
	v.isSet = true
}

func (v NullableAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuth(val *Auth) *NullableAuth {
	return &NullableAuth{value: val, isSet: true}
}

func (v NullableAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


