/*
Robinhood API

Robinhood API Documentation

API version: 3.0.1
Contact: austin.millan@protonmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Side the model 'Side'
type Side string

// List of Side
const (
	BUY Side = "buy"
	SELL Side = "sell"
)

// All allowed values of Side enum
var AllowedSideEnumValues = []Side{
	"buy",
	"sell",
}

func (v *Side) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Side(value)
	for _, existing := range AllowedSideEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Side", value)
}

// NewSideFromValue returns a pointer to a valid Side
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSideFromValue(v string) (*Side, error) {
	ev := Side(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Side: valid values are %v", v, AllowedSideEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Side) IsValid() bool {
	for _, existing := range AllowedSideEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Side value
func (v Side) Ptr() *Side {
	return &v
}

type NullableSide struct {
	value *Side
	isSet bool
}

func (v NullableSide) Get() *Side {
	return v.value
}

func (v *NullableSide) Set(val *Side) {
	v.value = val
	v.isSet = true
}

func (v NullableSide) IsSet() bool {
	return v.isSet
}

func (v *NullableSide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSide(val *Side) *NullableSide {
	return &NullableSide{value: val, isSet: true}
}

func (v NullableSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

